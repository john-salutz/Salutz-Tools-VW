{//////////////////////////////////////////////////////////////////////////////
//  Developed by John Salutz, (c) 2020. Please share freely.
//
//  LED Tape object draws a path and adds a series of text labels
//  along the segment that show the Type, channel, and address.
//////////////////////////////////////////////////////////////////////////////}

{//////////////////////////////////////////////////////////////////////////////
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 2.1 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
//  <https://www.gnu.org/licenses/>
//////////////////////////////////////////////////////////////////////////////}

PROCEDURE LEDTape;

CONST
	RGBmax =  65535; {Max value for setting RGB colors in VS fuctions}

VAR
	{Standard variables}
	s_ObjName                                               : STRING;
	h_Obj,h_ObjRecord,h_ObjWall                             : HANDLE;
	b_Result                                                : BOOLEAN;
	i_Counter                                               : INTEGER;
	{Script specific variables}
	s_Label                                                 : STRING;
	i_NumPathPoints                                         : INTEGER;
	r_LabelWidth,r_LengthUnit                               : REAL;
	h_Path,h_Path2                                          : HANDLE;
	h_PathTmp1,h_PathTmp2,h_PathTmp3,h_PathTmp4             : HANDLE;
	p_1,p_2                                                 : POINT;

{===== LOCAL FUNCTION DECLARATIONS =====}

{// See SalutzToolsFunctions.vss for additional fuctions //}
{$INCLUDE SalutzToolsFunctions.vss}

{ Future use IMP/Metric conversion }
{ CASE GetPrefInt(170) OF }
{ 1: Message('Feet and Inches'); }
{ 2: Message('Inches'); }
{ 3: Message('Feet'); }
{ 4: Message('Yards'); }
{ 5: Message('Miles'); }
{ 6: Message('Microns'); }
{ 7: Message('Millimeters'); }
{ 8: Message('Centimeters'); }
{ 9: Message('Meters'); }
{ 10: Message('Kilometers'); }
{ 11: Message('Degrees'); }
{ END; }

	FUNCTION Offset_Poly_Sections(hOrig : HANDLE; rOffset : REAL) : HANDLE;
VAR
	hTotal,hPart,hTemp : HANDLE;
	p1,p2,p3        : POINT;
	vT1,vT2,vT3      : INTEGER; {Vertex Type}
	vertexNum    : INTEGER;
	aR1,aR2,aR3      : REAL; {Arc Radius}
BEGIN

	IF GetVertNum(hOrig)>2 THEN BEGIN
		vertexNum := 3;
		GetPolylineVertex(hOrig, vertexNum-2, p1.X, p1.Y, vT1, aR1);
		GetPolylineVertex(hOrig, vertexNum-1, p2.X, p2.Y, vT2, aR2);
		GetPolylineVertex(hOrig, vertexNum, p3.X, p3.Y, vT3, aR3);
		BeginPoly;
		Add2DVertex(p1.X, p1.Y, vT1, aR1);
		Add2DVertex(p2.X, p2.Y, vT2, aR2);
		Add2DVertex(p3.X, p3.Y, vT3, aR3);
		EndPoly;
		hTemp := LNewObj;
		hPart := OffsetPoly(hTemp,rOffset/2,1,FALSE,FALSE,100,0);
		DelObject(hTemp);
		hTotal := hPart;
		vertexNum := vertexNum+1;

		FOR vertexNum := 4 TO GetVertNum(hOrig) DO BEGIN
			GetPolylineVertex(hOrig, vertexNum-2, p1.X, p1.Y, vT1, aR1);
			GetPolylineVertex(hOrig, vertexNum-1, p2.X, p2.Y, vT2, aR2);
			GetPolylineVertex(hOrig, vertexNum, p3.X, p3.Y, vT3, aR3);
			IF (vT1=0) THEN BEGIN
				BeginPoly;
				Add2DVertex(p1.X, p1.Y, vT1, aR1);
				Add2DVertex(p2.X, p2.Y, vT2, aR2);
				Add2DVertex(p3.X, p3.Y, vT3, aR3);
				EndPoly;
				hTemp := LNewObj;
				SetPolylineVertex(hTemp,vertexNum-2, p1.X, p1.Y, vT1, aR1,TRUE);
				SetPolylineVertex(hTemp,vertexNum-1, p2.X, p2.Y, vT2, aR2,TRUE);
				SetPolylineVertex(hTemp,vertexNum, p3.X, p3.Y, vT3, aR3,TRUE);
				
			END ELSE BEGIN
				BeginPoly;
				Add2DVertex(p2.X, p2.Y, vT2, aR2);
				Add2DVertex(p3.X, p3.Y, vT3, aR3);
				EndPoly;
				hTemp := LNewObj;
			END;
			hPart := OffsetPoly(hTemp,rOffset/2,1,FALSE,FALSE,100,0);
			DelObject(hTemp);
			hTotal := hPart;
			{ hTemp := AddSurface(hTotal,hPart); }
			{ hTotal := hTemp; }
		END;
	END ELSE BEGIN
		GetPolylineVertex(hOrig, 1, p1.X, p1.Y, vT1, aR1);
		GetPolylineVertex(hOrig, 2, p2.X, p2.Y, vT2, aR2);
		BeginPoly;
		Add2DVertex(p1.X, p1.Y, vT1, aR1);
		Add2DVertex(p2.X, p2.Y, vT2, aR2);
		EndPoly;
		hPart := OffsetPoly(LNewObj,rOffset/2,1,FALSE,FALSE,100,0);
		hTemp := hPart;
		hTotal := hTemp;

	END;
	Offset_Poly_Sections := hTotal;
END;

FUNCTION Setup_Text_Label (h : HANDLE;i1,i2 : INTEGER) : BOOLEAN;
VAR
	p1,p2 : POINT;
	v     : VECTOR;
	angle : REAL;
BEGIN
	GetPolyPt(h,i2,p2.X,p2.Y);
	GetPolyPt(h,i1,p1.X,p1.Y);
	v.X := p2.X - p1.X;
	v.Y := p2.Y - p1.Y;
	IF Norm(v) > r_LabelWidth THEN BEGIN
		angle := Vec2Ang(v);
		{// Make text Right Reading //}
		IF (GetSymRot(h_Obj) = 180) THEN angle := angle-360;

		IF ((angle>90) AND (angle<=180))
			OR ((angle<=-90) AND (angle>-180))
			THEN angle := angle-180;

		IF (angle<-90) THEN angle := angle+360
		ELSE IF (angle>90) THEN angle := angle-360;

		TextRotate(angle);
		TextOrigin((p2.X+p1.X)/2,(p2.Y+p1.Y)/2);


		IF (IsObjectFlipped(h_Obj) AND ((Abs(angle) = 90)
			OR (Abs(angle) = 270)))
			THEN BEGIN
				TextRotate(angle+180);
			END {ELSE TextFlip(1)};

		Setup_Text_Label := TRUE;
	END ELSE Setup_Text_Label := FALSE;
END;

{===================================}
{         -==<  MAIN  >==-          }
{===================================}

{// Retrieve plug-in object information //}
BEGIN IF GetCustomObjectInfo(s_ObjName,h_Obj,h_ObjRecord,h_ObjWall) THEN BEGIN
	Use_PIO_Text_Attributes(h_Obj);
	Set_Version_Info('0 . 6 . 7');
	{===== Parameter Limits =====}

	{===== Duplicate PIO Path Object =====}
	h_Path := GetCustomObjectPath(h_Obj);
	{ h_PathTmp1 := HDuplicate(h_Path,0,0); }
	{ h_PathTmp2 := HDuplicate(h_Path,0,0); }
	IF (GetVertNum(h_Path)>2) THEN BEGIN
		{ DelVertex(h_PathTmp1,GetVertNum(h_PathTmp1)); }
		{ DelVertex(h_PathTmp2,1); }
	END;
	IF (PTAPEWIDTH > 0) THEN BEGIN
		h_Path2 := OffsetPoly(h_Path,PTAPEWIDTH/2,1,FALSE,FALSE,100,0);
		h_PathTmp1 := HDuplicate(h_Path,0,0);
		h_PathTmp2 := OffsetPoly(h_PathTmp1,-PTAPEWIDTH/2,1,FALSE,FALSE,100,0);
		{ Ungroup; }
		{ h_PathTmp2 := LNewObj; }
		DelObject(h_PathTmp1);

		{ h_Path2 := Offset_Poly_Sections(h_Path,PTAPEWIDTH); }

		{ h_PathTmp3 := OffsetPoly(h_PathTmp1,PTAPEWIDTH/2,1,FALSE,FALSE,100,0); }
		{ h_PathTmp4 := OffsetPoly(h_PathTmp2,PTAPEWIDTH/2,1,FALSE,FALSE,100,0); }
		{ DelObject(h_PathTmp1); }
		{ DelObject(h_PathTmp2); }
	END ELSE BEGIN
		h_Path2 := OffsetPoly(h_Path,12mm/2,1,FALSE,FALSE,100,0);
		h_PathTmp1 := HDuplicate(h_Path,0,0);
		h_PathTmp2 := OffsetPoly(h_PathTmp1,-12mm/2,1,FALSE,FALSE,100,0);
		DelObject(h_PathTmp1);

		{ h_Path2 := Offset_Poly_Sections(h_Path,12mm); }

		{ h_PathTmp3 := OffsetPoly(h_PathTmp1,12mm/2,1,FALSE,FALSE,100,0); }
		{ h_PathTmp4 := OffsetPoly(h_PathTmp2,12mm/2,1,FALSE,FALSE,100,0); }
	END;
	{ HUngroup(GetParent(h_PathTmp2)); }
	{ ClipSurface(h_Path2,h_PathTmp2); }
	DelObject(h_PathTmp2);
	{ DelObject(h_PathTmp2); }
	{ b_Result := AddHole(h_Path2,h_PathTmp2); }
	{ SetFPat(h_Path2,0); }
	{ SetFPat(h_PathTmp2,0); }
	{ GetPolyPt(h_Path,1,p_1.X,p_1.Y); }
	{ h_PathTmp3 := CombineIntoSurface(p_1.X,p_1.Y); }
	{ DelObject(h_Path2); }

	{===== Setup Length & Wattage =====}
	SetRField(h_Obj,s_ObjName,'TotalLength', Num2StrF(HPerimN(h_Path)));
	IF ValidNumStr(PWATTLENGTH,r_LengthUnit) THEN
	SetRField(h_Obj,s_ObjName,'TotalWatts',
	          Concat(Num2Str(3,(HPerimN(h_Path)/r_LengthUnit)*PWATTSPER),
	          ' watts'))
	ELSE SetRField(h_Obj,s_ObjName,'TotalWatts','Invalid Length Unit');

	{===== Text Label Setup =====}
	s_Label := Concat(PTYPE,' ');
	IF (PCHAN<>'') AND (PCHAN<>'0') THEN
		Insert(Concat(' (',PCHAN,')'),s_Label,Len(s_Label));
	IF (PADDRS<>'') AND (PADDRS<>'0') AND (PADDRS<>'0/0') THEN
		Insert(Concat(' [',PADDRS,']'),s_Label,Len(s_Label));
	Insert(' ',s_Label,Len(s_Label));
	{// Create and delete text for measurement //}
	CreateText(s_Label);
	HScale2D(
	         LNewObj,0,0,
	         PTEXTHEIGHT/HHeight(LNewObj),PTEXTHEIGHT/HHeight(LNewObj),TRUE
	         );

	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
	TextSize(GetTextSize(LNewObj,0));
	r_LabelWidth := GetTextWidth(LNewObj);
	DelObject(LNewObj);
	TextJust(2);
	TextVerticalAlign(3);

	{===== Draw Path =====}
	h_Path := GetCustomObjectPath(h_Obj);
	i_NumPathPoints := GetVertNum(h_Path);
	Pen_WtoB(1);
	Fill_WtoB(0);
	IF IsObjectFlipped(h_Obj) THEN BEGIN
		FOR i_Counter:=i_NumPathPoints DOWNTO 2 DO BEGIN
			IF Setup_Text_Label(h_Path,i_Counter,i_Counter-1) THEN BEGIN
				IF IsObjectFlipped(h_Obj) THEN TextFlip(2);
				CreateText(s_Label);
				Set_Tight_TextFill(LNewObj,FALSE);
			END;
		END;
	END ELSE FOR i_Counter:=2 TO i_NumPathPoints DO BEGIN
		IF Setup_Text_Label(h_Path,i_Counter-1,i_Counter) THEN BEGIN
			CreateText(s_Label);
			Set_Tight_TextFill(LNewObj,FALSE);
		END;
	END;
	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}

END; END; Run(LEDTape);

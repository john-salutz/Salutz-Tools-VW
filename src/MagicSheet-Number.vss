{//////////////////////////////////////////////////////////////////////////////
//  Developed by John Salutz, (c) 2020. Please share freely.
//
//  Creates a number for use on a magic sheet
//////////////////////////////////////////////////////////////////////////////}

{//////////////////////////////////////////////////////////////////////////////
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//  <https://www.gnu.org/licenses/>
//////////////////////////////////////////////////////////////////////////////}

PROCEDURE MagicSheet_Number;

CONST
	RGBmax = 65535;

VAR
	{Standard variables}
	s_ObjName                                               : STRING;
	h_Obj,h_ObjRecord,h_ObjWall                             : HANDLE;
	b_Result                                                : BOOLEAN;
	i_Counter                                               : INTEGER;
	{Script specific variables}
	h_MagicText,h_Container                                 : HANDLE;
	pt1,pt2                                                 : POINT;

{===== LOCAL FUNCTION DECLARATIONS =====}

{// See SalutzToolsFunctions.vss for additional fuctions //}
{$INCLUDE SalutzToolsFunctions.vss}

PROCEDURE Copy_Fill_Color (source,target : HANDLE);
VAR r,g,b : LONGINT;
BEGIN
	GetFillBack(source,r,g,b);
	SetFillBack(target,r,g,b);
END;

{====================================}
{------------- < MAIN > -------------}
{====================================}

{// Retrieve plug-in object information //}
BEGIN IF GetCustomObjectInfo(s_ObjName,h_Obj,h_ObjRecord,h_ObjWall) THEN BEGIN
	Set_Version_Info('0 . 5 . 3');
	Use_PIO_Text_Attributes(h_Obj);

	{===== Parameter Limits =====}
	IF (PMAGICNUMBER='') THEN BEGIN
		SetRField(h_Obj,s_ObjName,'MagicNumber', '0');
		ResetObject(h_Obj);
	END;
	TextOrigin(0,0);
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
	TextJust(2);
	TextVerticalAlign(3);
	TextFace([]);

	{===== Draw Text =====}
	IF (Len(PPREFIX)+Len(PMAGICNUMBER)=1)
		THEN CreateText(Concat(PPREFIX,PMAGICNUMBER,'  '))
	ELSE CreateText(Concat(PPREFIX,PMAGICNUMBER,' '));
	h_MagicText := LNewObj;
	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}
	Set_Tight_TextFill(h_MagicText,FALSE);
	IF (PSTYLE='Invert Bold') THEN BEGIN
		SetTextStyle(h_MagicText,0,GetTextLength(h_MagicText),1);
		Set_Pen_WtoB(h_MagicText,0);
		Set_Background_WtoB(h_MagicText,1);
	END ELSE BEGIN
		Set_Pen_WtoB(h_MagicText,1);
		Set_Background_WtoB(h_MagicText,0);
		IF PSTYLE='Bold'
			THEN SetTextStyle(h_MagicText,0,GetTextLength(h_MagicText),1);
	END;

	{===== Draw Containers =====}
	IF (PCONTAINER<>'None') THEN BEGIN
		GetBBox(h_MagicText,pt1.X,pt1.Y,pt2.X,pt2.Y);
		IF (PCONTAINER='Circle') THEN BEGIN
			Oval(pt1.X,pt1.Y,pt2.X,pt2.Y);
			h_Container := LNewObj;
			HScale2D(h_Container,0,0,1,1.2,FALSE);
		END ELSE IF (PCONTAINER='Rectangle') THEN BEGIN
			Rect(pt1.X,pt1.Y,pt2.X,pt2.Y);
			h_Container := LNewObj;
		END ELSE IF (PCONTAINER='<<') THEN BEGIN
			BeginPoly;
			Add2DVertex(pt2.X,pt1.Y,0,0);
			Add2DVertex(pt1.X,pt1.Y,0,0);
			Add2DVertex(pt1.X-((pt1.Y-pt2.Y)/2),0,0,0);
			Add2DVertex(pt1.X,pt2.Y,0,0);
			Add2DVertex(pt2.X,pt2.Y,0,0);
			Add2DVertex(pt2.X,pt1.Y,0,0);
			EndPoly;
			h_Container := LNewObj;
		END ELSE IF (PCONTAINER='>>') THEN BEGIN
			BeginPoly;
			Add2DVertex(pt1.X,pt2.Y,0,0);
			Add2DVertex(pt2.X,pt2.Y,0,0);
			Add2DVertex(pt2.X-((pt2.Y-pt1.Y)/2),0,0,0);
			Add2DVertex(pt2.X,pt1.Y,0,0);
			Add2DVertex(pt1.X,pt1.Y,0,0);
			Add2DVertex(pt1.X,pt2.Y,0,0);
			EndPoly;
			h_Container := LNewObj;
		END;
		Set_Pen_WtoB(h_Container,1);
		SetLW(h_Container,7);
		Copy_Fill_Color(h_MagicText,h_Container);
		SetFPat(h_Container,1);
		SetFPat(h_MagicText,0);
		HMoveBackward(h_Container,TRUE);
	END;

END; END; Run(MagicSheet_Number);

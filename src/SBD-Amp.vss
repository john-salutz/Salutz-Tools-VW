{//////////////////////////////////////////////////////////////////////////////
//  Developed by John Salutz, (c) 2020. Please share freely.
//
//  SBD Amp is a point based object for drawing amplifiers in
//  an audio signal flow diagram.
//////////////////////////////////////////////////////////////////////////////}

{//////////////////////////////////////////////////////////////////////////////
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 2.1 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
//  <https://www.gnu.org/licenses/>
//////////////////////////////////////////////////////////////////////////////}

PROCEDURE SBD_Amp;

CONST
	RGBmax   = 65535; {Max value for setting RGB colors in VS fuctions}
	RegularH = 12in;
	SmallH   = 9in;
	MicroH   = 6in;

VAR
	{Standard variables}
	s_ObjName                                               : STRING;
	h_Obj,h_ObjRecord,h_ObjWall                             : HANDLE;
	b_Result                                                : BOOLEAN;
	i_Counter                                               : INTEGER;
	{Script specific variables}
	p_Tmp1,p_Tmp2,p_Center                                  : POINT;
	r_TextScaler                                            : REAL;
	r_Height,r_Space                                        : REAL;
	h_Rect,h_Model,h_TmpHandle                              : HANDLE;


{===== LOCAL FUNCTION DECLARATIONS =====}

{// See SalutzToolsFunctions.vss for additional fuctions //}
{$INCLUDE SalutzToolsFunctions.vss}

PROCEDURE Scale_Fit_Width (toScale,fitTo : HANDLE; scaleFactor : REAL);
VAR p1 : POINT;
BEGIN
	IF (HWidth(toScale) > HWidth(fitTo)) THEN BEGIN
		HCenter(toScale,p1.X,p1.Y);
		HScale2D(
		         toScale, p1.X, p1.Y, HWidth(fitTo)*scaleFactor/HWidth(toScale),
		         HWidth(fitTo)*scaleFactor/HWidth(toScale), TRUE
		         );
	END;
END;

{====================================}
{------------- < MAIN > -------------}
{====================================}

{// Retrieve plug-in object information //}
BEGIN IF GetCustomObjectInfo(s_ObjName,h_Obj,h_ObjRecord,h_ObjWall) THEN BEGIN
	Set_Version_Info('0 . 6 . 7');
	Use_PIO_Text_Attributes(h_Obj);
	{===== Parameter Limits =====}
	IF (PNUMCHAN<1) THEN BEGIN
		SetRField(h_Obj,s_ObjName,'NumChan', '1');
		ResetObject(h_Obj);
	END;

	{===== Variable Setup =====}
	r_TextScaler := 48/GetLScale(Find_Layer(h_Obj));

	BeginGroup;
	{===== Draw RRectangles =====}
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((}
	Pen_WtoB(1);
	Fill_WtoB(0);
	IF PNUMCHAN > 2 THEN RRect(-12in,0,12in,(-RegularH*PNUMCHAN),4in,4in)
	ELSE RRect(-12in,0,12in,(-RegularH*2),4in,4in);
	h_Rect := HDuplicate(LNewObj,0,0);
	SetFPat(h_Rect,0);
	HCenter(h_Rect,p_Center.X,p_Center.Y);
	IF (PNUMCHAN > 1) THEN p_Center.Y := p_Center.Y +(6in*(PNUMCHAN MOD 2));
	PopAttrs; {))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))}

	{===== Draw Model Rectangle & Text =====}
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((}
	PenPatN(0);
	PenSize(0);
	Rect(-12in,p_Center.Y+6in,12in,p_Center.Y-2in);
	h_Model := LNewObj;

	{// Model Text //}
	TextFace([Bold]);
	TextOrigin(p_Center.X,p_Center.Y+1in);
	TextJust(2);
	TextVerticalAlign(3);
	TextSize(7*r_TextScaler);
	CreateText(PMODEL);
	Scale_Fit_Width(LNewObj,h_Model,0.95);
	PopAttrs; {))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))}

	{===== Draw Text =====}
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((}
	TextFace([]);
	FillPat(0);
	Pen_WtoB(1);

	{// Draw ID Text //}
	GetBBox(h_Model,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_Tmp2.Y);
	TextOrigin(0,p_Tmp2.Y);
	TextJust(2);
	TextVerticalAlign(1);
	TextSize(5*r_TextScaler);
	CreateText(Concat(PPREFIX,PIDNUM));

	{// Draw Manufacturer Text //}
	TextOrigin(0,p_Center.Y+6in);
	TextVerticalAlign(1);
	TextSize(4*r_TextScaler);
	CreateText(PMANUFACTURER);
	Scale_Fit_Width(LNewObj,h_Rect,0.95);

	{// Draw Purpose Text //}
	TextOrigin(0,0);
	TextVerticalAlign(1);
	Pen_WtoB(0.75);
	{ TextFace([]); }
	IF (PPURPOSE <> '') THEN CreateText(PPURPOSE)
		ELSE CreateText(' ');
	Scale_Fit_Width(LNewObj,h_Rect,0.9);

	{// Draw Location Text //}
	TextOrigin(0,-6in);
	TextVerticalAlign(5);
	TextSize(3*r_TextScaler);
	Pen_WtoB(0.75);
	TextFace([Italic]);
	IF (PLOCATION <> '') THEN CreateText(Concat('@',PLOCATION))
		ELSE CreateText(' ');
	Scale_Fit_Width(LNewObj,h_Rect,0.9);

	{// Draw Note Text //}
	IF PSHOWNOTE THEN BEGIN
		PushAttrs;
		TextVerticalAlign(1);
		Pen_WtoB(0.5);
		TextFace([]);
		TextOrigin(0,p_Center.Y-6in);
		CreateText(PNOTES);
		SetTextWidth(LNewObj,24in);
		PopAttrs;
	END;
	PopAttrs; {))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))}

	{===== Draw Poly Arrows =====}
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((}
	MoveTo(-12in,-6in);
	Pen_WtoB(1);
	Fill_WtoB(0);
	Relative; {````````````````````````````````````````}
	BeginPoly;
	Add2DVertex(24.5in,0,0,0);
	Add2DVertex(0,2in,0,0);
	Add2DVertex(4in,-2in,0,0);
	Add2DVertex(-4in,-2in,0,0);
	Add2DVertex(0,2in,0,0);
	Add2DVertex(-24.5in,0,0,0);
	EndPoly;
	Absolute; {________________________________________}
	IF PNUMCHAN > 1 THEN BEGIN
		h_TmpHandle := LNewObj;
		FOR i_Counter:=2 TO PNUMCHAN
			DO h_TmpHandle := HDuplicate(h_TmpHandle,0,-12in);
	END;
	HMoveForward(h_Rect,TRUE);
	PopAttrs; {))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))}

	EndGroup;

END; END; Run(SBD_Amp);

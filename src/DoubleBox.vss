{//////////////////////////////////////////////////////////////////////////////
//  Developed by John Salutz, 2020. Please share freely.
//
//  DoubleBox creates a dynamic double rectangle object around text notes.
//////////////////////////////////////////////////////////////////////////////}

{//////////////////////////////////////////////////////////////////////////////
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//  <https://www.gnu.org/licenses/>
//////////////////////////////////////////////////////////////////////////////}

PROCEDURE DoubleBox_and_Notes;
CONST
	RGBmax =  65535;
VAR
	{Standard variables}
	s_ObjName                                               : STRING;
	h_Obj,h_ObjRecord,h_ObjWall                             : HANDLE;
	b_Result                                                : BOOLEAN;
	i_Counter                                               : INTEGER;
	{Script specific variables}
	r_ObjWidth,r_ObjHeight,r_HeightDiff                     : REAL;
	h_BackRect,h_FrontRect,h_PadRect,h_Text,h_Note          : HANDLE;
	s_NoteText,s_NoteTextTemp                               : STRING;
	i_result,dialog1                                        : INTEGER;
	p_Tmp1,p_Tmp2                                           : POINT;

{===== LOCAL FUNCTION DECLARATIONS =====}

{// See SalutzToolsFunctions.vss for additional fuctions //}
{$INCLUDE SalutzToolsFunctions.vss}

{// Dialog Handler for the "Edit Notes" section //}
PROCEDURE Dialog_Handler(VAR item :LONGINT; data :LONGINT);
BEGIN
	message('Item: ', item, '  Data in that item: ', data);
	GetMultilineText(dialog1,4,s_NoteTextTemp);
END;

{// Draws a rectangle or a rounded rectangle based on 'roundTrue' //}
FUNCTION RectOrRRect(x1,y1,x2,y2 : REAL; roundTrue :BOOLEAN) : HANDLE;
VAR r_RRectDiam : REAL;
BEGIN
	IF roundTrue THEN BEGIN
		r_RRectDiam := POFFSET_EDGE*2.25;
		RRect(x1,y1,x2,y2,r_RRectDiam,r_RRectDiam);
	END {IF roundTrue} ELSE BEGIN
		r_RRectDiam := 0;
		Rect(x1,y1,x2,y2);
	END;
	RectOrRRect := LNewObj;
END;

{// Draws a rectangle offset from the passed obj //}
FUNCTION DrawOffsetRect(
                          offsetFrom : HANDLE; offset : REAL;
                          roundTrue : BOOLEAN
                          ) : HANDLE;
VAR Pt1,Pt2 : POINT;
BEGIN
	GetBBox(offsetFrom,Pt1.X,Pt1.Y,Pt2.X,Pt2.Y);
	DrawOffsetRect := RectOrRRect(
	                              Pt1.X-offset, Pt1.Y+offset,
	                              Pt2.X+offset, Pt2.Y-offset, roundTrue
	                              );
END;


PROCEDURE Set_DashStyle_Cust(h : HANDLE; style : STRING);
VAR li_Dash : LONGINT;
BEGIN
	{// Dashed Line Setup //}
	IF style = 'Solid' THEN
		li_Dash := 2
	ELSE IF style='Dashed' THEN BEGIN
		li_Dash := GetDashStyleIndexN(TRUE, 1, 0.12in, 0.03in);
		b_Result := SetDashLineTypeName(li_Dash, 'ISO-02 Dashed');
	END
	ELSE IF style='Dashed Spaced' THEN BEGIN
		li_Dash := GetDashStyleIndexN(TRUE, 1, 0.12in, 0.18in);
		b_Result := SetDashLineTypeName(li_Dash, 'ISO-03 Dashed Spaced');
	END
	ELSE IF style='Dotted' THEN BEGIN
		li_Dash := GetDashStyleIndexN(TRUE, 1, 0.005in, 0.03in);
		b_Result := SetDashLineTypeName(li_Dash, 'ISO-07 Dotted');
	END
	ELSE IF style='None' THEN BEGIN
		li_Dash := 2;
		SetLW(h,0);
	END;
	SetLSN(h,li_Dash);
END;


PROCEDURE DrawDuplicateOffset(h : HANDLE; limit : REAL);
VAR
	i     : INTEGER;
	hCopy : HANDLE;
BEGIN
	hCopy := h;
	FOR i:=1 TO Round(limit) DO BEGIN
		hCopy := DrawOffsetRect(hCopy,POFFSET_EDGE/(limit+1),PISROUNDED);
		IF (PDASH<>'Cut-Out') THEN Set_DashStyle_Cust(hCopy,PDASH);
	END;
END;

PROCEDURE Note_Resize;
VAR
	p1,p2,p3,p4 : POINT;
BEGIN
	GetBBox(h_PadRect,p1.X,p1.Y,p2.X,p2.Y);
	GetBBox(h_Note,p3.X,p3.Y,p4.X,p4.Y);
	r_HeightDiff := p2.X - p4.X;
	IF ((PNOTERESIZE = 'Box Expands to Note Height') AND
		(r_HeightDiff < 0)) OR
		(PNOTERESIZE = 'Box Follows Note Height') THEN BEGIN
			SetRField(h_Obj,s_ObjName,'LineLength',
			          Num2StrF(PLINELENGTH-r_HeightDiff));
			ResetObject(h_Obj);
		END;
END;

PROCEDURE Set_Note_Text_Origin;
VAR
	p1,p2,p3,p4,pResult : POINT;
BEGIN
	pResult.X := 0;
	pResult.Y := 0;
	IF (PLABEL_POSITION='Inside')
		OR (PLABEL_POSITION='Pad')
		OR (PLABEL_POSITION='Offset') THEN BEGIN
			GetBBox(h_Text,p1.X,p1.Y,p2.X,p2.Y);
			GetBBox(h_PadRect,p3.X,p3.Y,p4.X,p4.Y);
			pResult.X := Max(p2.X,p3.X)+(HWidth(h_Text)*0.1);
	END ELSE IF (PLABEL_POSITION='Outside')
		OR (NOT PSHOWLABEL)
		OR (GetTextLength(h_Text)=0)THEN BEGIN
			GetBBox(h_PadRect,p1.X,p1.Y,p2.X,p2.Y);
			pResult.X := p1.X;
	END;
	TextOrigin(pResult.X,pResult.Y);
END;

{====================================}
{------------- < MAIN > -------------}
{====================================}

{// Retrieve plug-in object information //}
BEGIN IF GetCustomObjectInfo(s_ObjName,h_Obj,h_ObjRecord,h_ObjWall) THEN BEGIN
	Set_Version_Info('0 . 6 . 7');
	Use_PIO_Text_Attributes(h_Obj);

	{===== Variable Assignment =====}
	r_ObjHeight := PBOXWIDTH;
	r_ObjWidth := PLINELENGTH;

	{===== Parameter Limits =====}
	IF (POFFSET_EDGE<0) THEN BEGIN
		SetRField(h_Obj,s_ObjName,'Offset Edge', '0');
		AlrtDialog('Offset Out of Bounds, Offset may not be less than zero.');
		ResetObject(h_Obj);
	END;
	IF (PPAD<0) THEN BEGIN
		SetRField(h_Obj,s_ObjName,'Pad', '0');
		AlrtDialog('Pad Out of Bounds, Pad may not be less than 0 (zero).');
		ResetObject(h_Obj);
	END;

	IF (PTEXTCOLOR='Keep Text Black') THEN BEGIN
		SetRField(h_Obj,s_ObjName,'TextColor', 'Black');
		ResetObject(h_Obj);
		ResetObject(h_Obj);
	END;

	IF (PSHOWLABEL) THEN BEGIN
		SetParameterVisibility(h_Obj,'Label',TRUE);
		SetParameterVisibility(h_Obj,'Label Position',TRUE);
		SetParameterVisibility(h_Obj,'Underline',TRUE);
	END ELSE BEGIN
		SetParameterVisibility(h_Obj,'Label',FALSE);
		SetParameterVisibility(h_Obj,'Label Position',FALSE);
		SetParameterVisibility(h_Obj,'Underline',FALSE);
	END;

	Locus(0,0);

	{===== Create rectangles =====}
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}

	{// Create background rectangle //}
	IF PINOROUT='Inward'
		THEN h_BackRect := RectOrRRect(
		                               0, r_ObjHeight/2,
		                               r_ObjWidth, -r_ObjHeight/2,
		                               PISROUNDED
		                               )
	ELSE IF PINOROUT='Outward'
		THEN h_BackRect := RectOrRRect(
		                               -POFFSET_EDGE-PPAD,
		                               r_ObjHeight/2+POFFSET_EDGE+PPAD,
		                               r_ObjWidth+POFFSET_EDGE+PPAD,
		                               -r_ObjHeight/2-POFFSET_EDGE-PPAD,
		                               PISROUNDED
		                               );

	{// Create foreground rectangle //}
	Fill_WtoB(0);
	PenSize(Round(GetLW(h_Obj)*0.5));
	h_FrontRect := DrawOffsetRect(h_BackRect,-POFFSET_EDGE,PISROUNDED);

	{// Create foreground rectangle duplicates //}
	PenSize(Round(GetLW(h_Obj)*0.25));
	FillPat(0);
	IF (PINNERDUP<>'0')
		THEN DrawDuplicateOffset(h_FrontRect,Str2Num(PINNERDUP));

	{// Create pad rectangle //}
	FillPat(0);
	PenPatN(2);
	PenSize(0);
	h_PadRect := DrawOffsetRect(h_FrontRect,-PPAD,PISROUNDED);

	{// foreground rectangle style //}
		{ Keep this here. Needs to be called after "Create pad rect" }
		{ because it needs h_FrontRect to exist for reference }
	IF PDASH = 'Cut-Out' THEN BEGIN
		IF (POFFSET_EDGE > 0)
			THEN h_BackRect := ClipSurfaceN(h_BackRect,h_FrontRect);
		DelObject(h_FrontRect);
		HMoveBackward(h_BackRect,TRUE);
	END ELSE Set_DashStyle_Cust(h_FrontRect,PDASH);

	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}

	{===== Setup and create label text =====}
	IF (PSHOWLABEL AND (PLABEL<>'')) THEN BEGIN
		PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
		TextJust(2);
		TextRotate(90);
		IF (PTEXTCOLOR='Black') THEN Pen_WtoB(1)
		ELSE IF (PTEXTCOLOR='White') THEN Pen_WtoB(0);
		PenPatN(2);
		PenSize(7);
		IF (PLABEL_POSITION='Inside') THEN BEGIN
			GetBBox(h_PadRect,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_Tmp2.Y);
			TextOrigin(p_Tmp1.X,0);
			TextVerticalAlign(1);
			Fill_WtoB(0);
		END ELSE IF (PLABEL_POSITION='Outside') THEN BEGIN
			GetBBox(h_BackRect,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_Tmp2.Y);
			TextOrigin(p_Tmp1.X+((-POFFSET_EDGE-PPAD)/4),0);
			TextVerticalAlign(5);
			Fill_WtoB(0);
		END ELSE IF (PLABEL_POSITION='Pad') THEN BEGIN
			GetBBox(h_PadRect,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_Tmp2.Y);
			TextOrigin(p_Tmp1.X-(PPAD/2),0);
			TextVerticalAlign(3);
			Fill_WtoB(0);
		END ELSE IF (PLABEL_POSITION='Offset') THEN BEGIN
			GetBBox(h_BackRect,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_Tmp2.Y);
			TextOrigin(p_Tmp1.X+(POFFSET_EDGE/2),0);
			TextVerticalAlign(3);
			Fill_WtoB(0);
		END;
		CreateText(Concat(PLABEL,'  '));
		h_Text := LNewObj;
		Set_Tight_TextFill(h_Text,FALSE);
		IF (PLABEL_POSITION='Inside') AND (HHeight(h_Text)>HHeight(h_PadRect))
			THEN SetTextWidth(h_Text,HHeight(h_PadRect));

		{// Underline creation //}
		IF (GetTextLength(h_Text)>0) AND (PUNDERLINE<>'None') THEN BEGIN
			GetBBox(h_Text,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_Tmp2.Y);
			MoveTo(p_Tmp2.X,p_Tmp2.Y);
			IF PUNDERLINE = 'Underline' THEN LineTo(p_Tmp2.X,p_Tmp1.Y)
			ELSE BEGIN
				LineTo(p_Tmp2.X,p_Tmp1.Y);
				LineTo(p_Tmp1.X,p_Tmp1.Y);
				LineTo(p_Tmp1.X,p_Tmp2.Y);
				LineTo(p_Tmp2.X,p_Tmp2.Y);
			END;
		END;

		PopAttrs; {))))))))))))))))))))))))))))))))))))))))}
	END;

	{===== Notes dialog, setup and creation =====}
	IF (PSHOWNOTES) THEN BEGIN
		SetParameterVisibility(h_Obj,'EditNotes',TRUE);
		SetParameterVisibility(h_Obj,'NoteSize',TRUE);
		SetParameterVisibility(h_Obj,'NoteHoriz',TRUE);
		SetParameterVisibility(h_Obj,'NoteResize',TRUE);
		SetParameterVisibility(h_Obj,'TabSize',TRUE);
		SetTextVertAlignN(h_Text,1);
		MoveTo(0,0);
		Set_Note_Text_Origin;

		s_NoteText := P__NOTESTRING; {get default or current value}

		{=== Edit Notes Dialog ===}
		IF PEDITNOTES THEN BEGIN
			dialog1 := CreateLayout(Concat(PLABEL,': Notes Dialog'),
			                        FALSE, 'OK', 'Cancel');
			CreateEditTextBox(dialog1, 4, s_NoteText, 80, 16);
			SetFirstLayoutItem(dialog1, 4);
			i_result := RunLayoutDialog(dialog1, Dialog_Handler);
			IF (i_result=1) THEN BEGIN
				s_NoteText := s_NoteTextTemp;
				SetRField(h_Obj,s_ObjName,'__NoteString',s_NoteText);
			END;
			SetRField(h_Obj,s_ObjName,'EditNotes','FALSE');
		END;

		PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
		TextRotate(90);
		TextSize(PNOTESIZE);
		TextFace([]);
		TextVerticalAlign(1);
		TextJust(2);
		FillPat(0);
		IF (PTEXTCOLOR='Black') THEN Pen_WtoB(1)
		ELSE IF (PTEXTCOLOR='White') THEN Pen_WtoB(0);
		CreateText(s_NoteText);
		IF s_NoteText <> '' THEN h_Note := LNewObj;
		SetObjectVariableReal(
		                      h_Note,
		                      682,
		                      GetLScale(Find_Layer(h_Obj))*PTABSIZE
		                      );
		PopAttrs; {))))))))))))))))))))))))))))))))))))))))}

		SetTextWidth(h_Note,HHeight(h_PadRect));
		IF PNOTEHORIZ = 'Left' THEN SetTextJustN(h_Note,1)
		ELSE IF PNOTEHORIZ = 'Center' THEN SetTextJustN(h_Note,2)
		ELSE IF PNOTEHORIZ = 'Right' THEN SetTextJustN(h_Note,3)
		ELSE IF PNOTEHORIZ = 'Justify' THEN SetTextJustN(h_Note,4);
		IF (PNOTERESIZE <> 'None') AND (s_NoteText<>'')
			THEN Note_Resize;

	END ELSE BEGIN
		SetParameterVisibility(h_Obj,'EditNotes',FALSE);
		SetParameterVisibility(h_Obj,'NoteSize',FALSE);
		SetParameterVisibility(h_Obj,'NoteHoriz',FALSE);
		SetParameterVisibility(h_Obj,'NoteResize',FALSE);
		SetParameterVisibility(h_Obj,'TabSize',FALSE);
	END;

END; END; Run(DoubleBox_and_Notes);

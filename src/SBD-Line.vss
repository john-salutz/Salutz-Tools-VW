{//////////////////////////////////////////////////////////////////////////////
//  Developed by John Salutz, (c) 2020. Please share freely.
//
//  SBD Line draws a dynamic polyline with midpoint control & markers.
//////////////////////////////////////////////////////////////////////////////}

{//////////////////////////////////////////////////////////////////////////////
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 2.1 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
//  <https://www.gnu.org/licenses/>
//////////////////////////////////////////////////////////////////////////////}

PROCEDURE SBD_Line;

CONST
	RGBmax   = 65535; {Max value for setting RGB colors in VS fuctions}
	RegularH = 12in;
	SmallH   = 9in;
	MicroH   = 6in;

VAR
	{Standard variables}
	s_ObjName                                               : STRING;
	h_Obj,h_ObjRecord,h_ObjWall                             : HANDLE;
	b_Result,b_ResetObj                                     : BOOLEAN;
	i_Counter                                               : INTEGER;
	{Script specific variables}
	pt1,pt2                                                 : POINT;
	p_Start,p_StartCorner,p_Midpoint,p_EndCorner,p_End      : POINT;
	h_Poly                                                  : HANDLE;
	r_CornerSize,r_test                                     : REAL;
	i_CornerStyle,i_FlipX1,i_FlipX2                         : INTEGER;
	i_BegDupSize,i_EndDupSize                               : INTEGER;

{===== LOCAL FUNCTION DECLARATIONS =====}

{// See SalutzToolsFunctions.vss for additional fuctions //}
{$INCLUDE SalutzToolsFunctions.vss}

PROCEDURE Resolve_MidPoint_Conflict;
VAR
	matchPoint,matchField : BOOLEAN;
	correctValue          : STRING;
BEGIN
	matchPoint := (P__STOREMIDPOINTDIST = Num2StrF(PCONTROLPOINT02X));
	matchField := (P__STOREMIDPOINTDIST = Num2StrF(PMIDPOINTDIST));
	correctValue := '';
	IF matchPoint AND NOT matchField THEN BEGIN
		{Field correct, set value from field}
		correctValue := Num2StrF(PMIDPOINTDIST);
	END ELSE IF NOT matchPoint AND matchField THEN BEGIN
		{Point correct, set value from control point}
		correctValue := Num2StrF(PCONTROLPOINT02X);
	END ELSE IF NOT matchPoint AND NOT matchField THEN BEGIN
		{Neither correct, set value from control point}
		correctValue := Num2StrF(PCONTROLPOINT02X);
	END;
	IF correctValue<>'' THEN BEGIN
		SetRField(h_Obj,s_ObjName,'ControlPoint02X',correctValue);
		SetRField(h_Obj,s_ObjName,'MidpointDist',correctValue);
		SetRField(h_Obj,s_ObjName,'__StoreMidpointDist',correctValue);
		{ ResetObject(h_Obj); }
		b_ResetObj := TRUE;
	END;
END;

PROCEDURE Resolve_Endpoint_Conflict;
VAR
	matchPoint,matchField : BOOLEAN;
	correctValue          : STRING;
BEGIN
	matchPoint := (P__STOREENDDIST = Num2StrF(PCONTROLPOINT03X));
	matchField := (P__STOREENDDIST = Num2StrF(PENDDIST));
	correctValue := '';
	IF matchPoint AND NOT matchField THEN BEGIN
		{Field correct, set value from field}
		correctValue := Num2StrF(PENDDIST);
	END ELSE IF NOT matchPoint AND matchField THEN BEGIN
		{Point correct, set value from control point}
		correctValue := Num2StrF(PCONTROLPOINT03X);
	END ELSE IF NOT matchPoint AND NOT matchField THEN BEGIN
		{Neither correct, set value from control point}
		correctValue := Num2StrF(PCONTROLPOINT03X);
	END;
	IF correctValue<>'' THEN BEGIN
		SetRField(h_Obj,s_ObjName,'ControlPoint03X',correctValue);
		SetRField(h_Obj,s_ObjName,'EndDist',correctValue);
		SetRField(h_Obj,s_ObjName,'__StoreEndDist',correctValue);
		{ ResetObject(h_Obj); }
		b_ResetObj := TRUE;
	END;
END;

FUNCTION Resolve_Begin_Conflict : BOOLEAN;
VAR
	v1 : VECTOR;
BEGIN
	IF (PCONTROLPOINT01X <> 0) OR (PCONTROLPOINT01Y <> 0) THEN BEGIN
		v1.X := PCONTROLPOINT01X;
		v1.Y := PCONTROLPOINT01Y;
		v1 := Ang2Vec(GetSymRot(h_Obj)+Vec2Ang(v1),Norm(v1));
		HMove(h_Obj,v1.X,v1.Y);
		SetRField(h_Obj,s_ObjName,'ControlPoint01X','0');
		SetRField(h_Obj,s_ObjName,'ControlPoint01Y','0');
		SetRField(
		          h_Obj,s_ObjName,'ControlPoint02X',
		          Num2StrF(PCONTROLPOINT02X-PCONTROLPOINT01X)
		          );
		SetRField(
		          h_Obj,s_ObjName,'ControlPoint02Y',
		          Num2StrF(PCONTROLPOINT02Y-PCONTROLPOINT01Y)
		          );
		SetRField(
		          h_Obj,s_ObjName,'ControlPoint03X',
		          Num2StrF(PCONTROLPOINT03X-PCONTROLPOINT01X)
		          );
		SetRField(
		          h_Obj,s_ObjName,'ControlPoint03Y',
		          Num2StrF(PCONTROLPOINT03Y-PCONTROLPOINT01Y)
		          );
		{ ResetObject(h_Obj); }
		b_ResetObj := TRUE;
		Resolve_Begin_Conflict := TRUE;
	END ELSE Resolve_Begin_Conflict := FALSE;
END;

PROCEDURE Draw_Line(p1,p2,p3 : POINT; cstyle : INTEGER; csize : REAL);
BEGIN
	MoveTo(0,0);
	BeginPoly;
	{Start point}
	Add2DVertex(p1.X,p1.Y,0,0);
	{Corner1}
	Add2DVertex(p2.X,p1.Y,cstyle,Abs(csize));
	{Corner2}
	Add2DVertex(p2.X,p3.Y,cstyle,Abs(csize));
	{End point}
	Add2DVertex(p3.X,p3.Y,0,0);
	EndPoly;
END;

{Sets Object Begin and End Markers to custom, 'Dot' OR 'Arrow'}
PROCEDURE Set_Markers_Cust (h : HANDLE;sBeg:STRING;sEnd:STRING);
VAR
	b     : BOOLEAN;
	ActLS : REAL;
BEGIN
	ActLS := GetLScale(Find_Layer(h_Obj));
	IF sBeg = 'Dot' THEN {Dot}
		b := SetObjBeginningMarker(h,2,0,1in/ActLS,1in/ActLS,0,0,TRUE)
	ELSE IF sBeg = 'Arrow' THEN {Arrow}
		b := SetObjBeginningMarker(h,2176,15,3in/ActLS,2in/ActLS,0,0,TRUE)
	ELSE IF sBeg = 'Box' THEN {Box}
		b := SetObjBeginningMarker(h,11+128,0,2.5in/ActLS,2in/ActLS,0,0,TRUE);
	IF sEnd = 'Dot' THEN {Dot}
		b := SetObjEndMarker(h,2,0,1in/ActLS,1in/ActLS,0,0,TRUE)
	ELSE IF sEnd = 'Arrow' THEN {Arrow}
		b := SetObjEndMarker(h,2176,15,3in/ActLS,2in/ActLS,0,0,TRUE)
	ELSE IF sEnd = 'Box' THEN {Box}
		b := SetObjEndMarker(h,11+128,0,2.5in/ActLS,2in/ActLS,0,0,TRUE);
END;


{====================================}
{------------- < MAIN > -------------}
{====================================}

{// Retrieve plug-in object information //}
BEGIN IF GetCustomObjectInfo(s_ObjName,h_Obj,h_ObjRecord,h_ObjWall) THEN BEGIN
	Set_Version_Info('0 . 6 . 7');
	Use_PIO_Text_Attributes(h_Obj);
	SetParameterVisibility(h_Obj,'ControlPoint01X',FALSE);
	SetParameterVisibility(h_Obj,'ControlPoint01Y',FALSE);
	SetParameterVisibility(h_Obj,'ControlPoint02X',FALSE);
	SetParameterVisibility(h_Obj,'ControlPoint02Y',FALSE);
	SetParameterVisibility(h_Obj,'ControlPoint03X',FALSE);
	SetParameterVisibility(h_Obj,'ControlPoint03Y',FALSE);
	b_ResetObj := FALSE;

	{===== Parameter checking =====}
	IF NOT Resolve_Begin_Conflict THEN BEGIN
		Resolve_MidPoint_Conflict;
		Resolve_Endpoint_Conflict;
	END;

	{===== Variable Assignment =====}
	p_Start.X := 0;
	p_Start.Y := 0;
	p_End.X := PCONTROLPOINT03X;
	p_End.Y := PCONTROLPOINT03Y;
	p_Midpoint.X := PCONTROLPOINT02X;
	p_Midpoint.Y := (p_End.Y-p_Start.Y)/2;
	IF PCORNERS='Square' THEN BEGIN
		i_CornerStyle := 0;
		SetParameterVisibility(h_Obj,'RoundRadius',FALSE);
	END;
	IF PCORNERS='Rounded' THEN BEGIN
		i_CornerStyle := 3;
		SetParameterVisibility(h_Obj,'RoundRadius',TRUE);
	END;

	IF PBEGDUPSIZE = 'Regular' THEN i_BegDupSize := RegularH
	ELSE IF PBEGDUPSIZE = 'Small' THEN i_BegDupSize := SmallH
	ELSE IF PBEGDUPSIZE = 'Micro' THEN i_BegDupSize := MicroH;

	IF PENDDUPSIZE = 'Regular' THEN i_EndDupSize := RegularH
	ELSE IF PENDDUPSIZE = 'Small' THEN i_EndDupSize := SmallH
	ELSE IF PENDDUPSIZE = 'Micro' THEN i_EndDupSize := MicroH;

	{// Corner Sizing //}
	r_CornerSize := PROUNDRADIUS;
	IF Abs(p_End.Y)<(r_CornerSize*2)
		THEN r_CornerSize := Abs(p_End.Y/2);
	IF Abs(p_Midpoint.X)<(r_CornerSize)
		THEN r_CornerSize := Abs(p_Midpoint.X/2);
	IF Abs(p_End.X-p_Midpoint.X)<(r_CornerSize)
		THEN r_CornerSize := Abs((p_End.X-p_Midpoint.X)/2);

	{===== Draw Poly =====}
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((}
	FillPat(0);
	Draw_Line(p_Start,p_Midpoint,p_End,i_CornerStyle,r_CornerSize);
	h_Poly := LNewObj;

	{===== Set poly markers =====}
	Set_Markers_Cust(h_Poly,PBEGMARK,PENDMARK);

	{===== Draw Beginning Duplicates =====}
	IF PNUMBEGINDUP > 0 THEN FOR i_Counter := 1 TO PNUMBEGINDUP DO BEGIN
		BeginPoly;
		Add2DVertex(p_Start.X,p_Start.Y+(i_Counter*i_BegDupSize),0,0);
		Add2DVertex(p_Start.X+3in,p_Start.Y+(i_Counter*i_BegDupSize),
		            i_CornerStyle,3in);
		Add2DVertex(p_Start.X+3in,p_Start.Y,i_CornerStyle,3in);
		IF p_Midpoint.X > (p_Start.X+3in) THEN
			Add2DVertex(p_Midpoint.X-r_CornerSize,p_Start.Y,0,0)
		ELSE Add2DVertex(p_Midpoint.X,p_Midpoint.Y,0,0);
		EndPoly;
		Set_Markers_Cust(LNewObj,PBEGMARK,'NA');

	END ELSE FOR i_Counter := -1 DOWNTO PNUMBEGINDUP DO BEGIN
		BeginPoly;
		Add2DVertex(p_Start.X,p_Start.Y+(i_Counter*i_BegDupSize),0,0);
		Add2DVertex(p_Start.X+3in,p_Start.Y+(i_Counter*i_BegDupSize),
		            i_CornerStyle,3in);
		Add2DVertex(p_Start.X+3in,p_Start.Y,i_CornerStyle,3in);
		IF p_Midpoint.X > (p_Start.X+3in) THEN
			Add2DVertex(p_Midpoint.X-r_CornerSize,p_Start.Y,0,0)
		ELSE Add2DVertex(p_Midpoint.X,p_Midpoint.Y,0,0);
		EndPoly;
		Set_Markers_Cust(LNewObj,PBEGMARK,'NA');
	END;

	{===== Draw End Duplicates =====}
	IF PNUMENDDUP > 0 THEN FOR i_Counter := 1 TO PNUMENDDUP DO BEGIN
		BeginPoly;
		Add2DVertex(p_End.X,p_End.Y+(i_Counter*i_EndDupSize),0,0);
		Add2DVertex(p_End.X-3in,p_End.Y+(i_Counter*i_EndDupSize),
		            i_CornerStyle,3in);
		Add2DVertex(p_End.X-3in,p_End.Y,i_CornerStyle,3in);
		IF p_Midpoint.X < (p_End.X+3in) THEN
			Add2DVertex(p_Midpoint.X+r_CornerSize,p_End.Y,0,0)
		ELSE Add2DVertex(p_Midpoint.X,p_Midpoint.Y,0,0);
		EndPoly;
		Set_Markers_Cust(LNewObj,PENDMARK,'NA');

	END ELSE FOR i_Counter := -1 DOWNTO PNUMENDDUP DO BEGIN
		BeginPoly;
		Add2DVertex(p_End.X,p_End.Y+(i_Counter*i_EndDupSize),0,0);
		Add2DVertex(p_End.X-3in,p_End.Y+(i_Counter*i_EndDupSize),
		            i_CornerStyle,3in);
		Add2DVertex(p_End.X-3in,p_End.Y,i_CornerStyle,3in);
		IF p_Midpoint.X < (p_End.X+3in) THEN
			Add2DVertex(p_Midpoint.X+r_CornerSize,p_End.Y,0,0)
		ELSE Add2DVertex(p_Midpoint.X,p_Midpoint.Y,0,0);
		EndPoly;
		Set_Markers_Cust(LNewObj,PENDMARK,'NA');
	END;

	PopAttrs; {))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))}

	SetRField(
	          h_Obj, s_ObjName, 'ControlPoint02Y',
	          Num2StrF((p_End.Y-p_Start.Y)/2)
	          );

	IF b_ResetObj THEN ResetObject(h_Obj);

END; END; Run(SBD_Line);

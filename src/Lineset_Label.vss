{//////////////////////////////////////////////////////////////////////////////
//  Developed by John Salutz, (c) 2020. Please share freely.
//
//  Creates a lineset label object which displays
//  y & z coordinates and/or user info fields.
//////////////////////////////////////////////////////////////////////////////}

{//////////////////////////////////////////////////////////////////////////////
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//  <https://www.gnu.org/licenses/>
//////////////////////////////////////////////////////////////////////////////}

PROCEDURE Lineset_Label;

CONST
	RGBmax = 65535;

VAR
	{Standard variables}
	s_ObjName                                               : STRING;
	h_Obj,h_ObjRecord,h_ObjWall                             : HANDLE;
	b_Result                                                : BOOLEAN;
	i_Counter                                               : INTEGER;
	{Script specific variables}
	i_Flip                                                  : INTEGER;
	r_TextScaler,x_coor,y_coor,z_coor                       : REAL;
	h_Num,h_Purpose,h_Weight                                : HANDLE;

{===== LOCAL FUNCTION DECLARATIONS =====}

{// See SalutzToolsFunctions.vss for additional fuctions //}
{$INCLUDE SalutzToolsFunctions.vss}

{ {\// Sets Version info parameter //!{\ }
{ PROCEDURE Set_Version_Info(s : STRING); }
{ BEGIN }
{ 	SetRField(h_Obj,s_ObjName,'ver',s); }
{ END; }

{ {\// Sets the specified text object to use the attributes of PIO //!{\ }
{ PROCEDURE Use_PIO_Text_Attributes (h : HANDLE); }
{ BEGIN }
{ 	SetObjectVariableBoolean(h,800,True); }
{ END; }

{ {\// Sets Background Fore and Back as White to Black, percentage set by 'r', }
{     format 0=White, 0.1 thru 0.9=10% to 90%, 1=Black //!{\ }
{ PROCEDURE Fill_WtoB (r : REAL); }
{ VAR i : LONGINT; }
{ BEGIN }
{ 	IF r<0 THEN r:=0; }
{ 	IF r>1 THEN r:=1; }
{ 	i := Trunc(RGBmax*(1-r)); }
{ 	FillPat(1); }
{ 	FillBack(i,i,i); }
{ END; }

{ {\// Sets Pen Fore and Back as White to Black, percentage set by 'r', }
{     format 0=White, 0.1 thru 0.9=10% to 90%, 1=Black //!{\ }
{ PROCEDURE Pen_WtoB (r : REAL); }
{ VAR i : LONGINT; }
{ BEGIN }
{ 	IF r<0 THEN r:=0; }
{ 	IF r>1 THEN r:=1; }
{ 	i := Trunc(RGBmax*(1-r)); }
{ 	PenPatN(2); }
{ 	PenFore(i,i,i); }
{ END; }

{ FUNCTION Find_Layer (obj : HANDLE) : HANDLE; }
{ BEGIN }
{ 	IF GetLayer(obj) = NIL THEN ResetObject(obj) }
{ 	ELSE Find_Layer := GetLayer(obj); }
{ END; }

{====================================}
{------------- < MAIN > -------------}
{====================================}

{// Retrieve plug-in object information //}
BEGIN IF GetCustomObjectInfo(s_ObjName,h_Obj,h_ObjRecord,h_ObjWall) THEN BEGIN
	Set_Version_Info('0 . 5 . 2');
	Use_PIO_Text_Attributes(h_Obj);

	{===== Parameter Limits =====}

	{===== Variable Assignment =====}
	IF PDIRECTION = '>>' THEN i_Flip := 1
	ELSE i_Flip := -1;
	r_TextScaler := 48/GetLScale(Find_Layer(h_Obj));
	GetSymLoc3D(h_Obj,x_coor,y_coor,z_coor);

	{===== Draw Shapes =====}
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
	Pen_WtoB(1);
	Fill_WtoB(0);
	{// Draw Poly //}
	BeginPoly;
	Add2DVertex(0,0,0,0);
	Add2DVertex(-2*i_Flip,0,0,0);
	Add2DVertex(-5.464*i_Flip,2,0,0);
	Add2DVertex(-60*i_Flip,2,0,0);
	Add2DVertex(-60*i_Flip,-2,0,0);
	Add2DVertex(-5.464*i_Flip,-2,0,0);
	Add2DVertex(-2*i_Flip,0,0,0);
	Add2DVertex(0,0,0,0);
	EndPoly;
	{// Draw Number rectangle //}
	Fill_WtoB(0.25);
	Rect(-19*i_Flip,2,-13*i_Flip,-2);
	{// Draw division line //}
	MoveTo(-31*i_Flip,2);
	Line(0,-4);
	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}

	{===== Draw Text =====}
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
	FillPat(0);
	TextVerticalAlign(3);
	TextJust(2);
	TextSize(4*r_TextScaler);
	{Lineset Name / Purpose}
	TextOrigin(-32*i_Flip,0);
	IF PPURPOSE <> '' THEN BEGIN
		IF PTYPE='LX' THEN BEGIN
			TextFace([Bold]);
			CreateText(PPURPOSE);
			TextFace([]);
		END ELSE BEGIN
			TextFace([]);
			CreateText(PPURPOSE);
		END;
		IF PDIRECTION = '>>' THEN SetTextJust(LNewObj,3)
		ELSE SetTextJust(LNewObj,1);
	END ELSE TextFace([]);
	{Plasterline distance}
	Pen_WtoB(0.5);
	TextSize(3.5*r_TextScaler);
	TextOrigin(-9*i_Flip,0);
	IF (PUSEOBJY) THEN BEGIN
		CreateText(Num2StrF(y_coor));
		SetParameterVisibility(h_Obj,'PLDist',FALSE);
	END ELSE CreateText(Num2StrF(PPLDIST));
	{Lineset Number}
	TextSize(5*r_TextScaler);
	Pen_WtoB(1);
	TextFace([Bold]);
	TextOrigin(-16*i_Flip,0);
	CreateText(PLSNUM);
	{Trim}
	TextSize(4*r_TextScaler);
	TextFace([Italic]);
	TextOrigin(-25*i_Flip,0);
	IF PUSEOBJZ THEN BEGIN
		SetParameterVisibility(h_Obj,'Trim',FALSE);
		IF (z_coor <> 0) THEN BEGIN
			CreateText(Concat('@',Num2StrF(z_coor),' '));
			Set_Tight_TextFill(LNewObj,FALSE);
		END;
	END ELSE IF (PTRIM <> 0) THEN BEGIN
		CreateText(Concat('@',Num2StrF(PTRIM)));
	END;
	{Weight}
	IF PWEIGHT>0 THEN BEGIN
		TextFace([]);
		Fill_WtoB(0);
		TextOrigin(1*i_Flip,0);
		CreateText(Concat(PWEIGHT,' ',PWEIGHTUNITS));
		IF PDIRECTION = '>>' THEN SetTextJust(LNewObj,1)
		ELSE SetTextJust(LNewObj,3);
	END;
	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}

	{===== Format Text =====}
	{// Set Alignment //}
	IF PDIRECTION = '>>' THEN BEGIN
		SetTextJust(h_Purpose,3);
		SetTextJust(h_Weight,1);
	END ELSE BEGIN
		SetTextJust(h_Purpose,1);
		SetTextJust(h_Weight,3);
	END;

	{// Draw Marker //}
	IF PTYPE<>' ' THEN BEGIN
		PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
		PenPatN(0);
		PenSize(0);
		Rect(-5.5*i_Flip,2,0*i_Flip,-2);
		HMoveBackward(LNewObj,TRUE);
		PopAttrs; {))))))))))))))))))))))))))))))))))))))))}
	END;

	{// Hide/Show in 3D Views //}
	IF PSHOW3D=FALSE THEN Locus3D(0,0,0);

END; END; Run(Lineset_Label);

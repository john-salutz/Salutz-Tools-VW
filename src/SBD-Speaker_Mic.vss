{//////////////////////////////////////////////////////////////////////////////
//  Developed by John Salutz, (c) 2020. Please share freely.
//
//  SBD Speaker Mic is a point based object for drawing Speakers and
//  Microphones in an audio signal flow diagram.
//////////////////////////////////////////////////////////////////////////////}

{//////////////////////////////////////////////////////////////////////////////
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//  <https://www.gnu.org/licenses/>
//////////////////////////////////////////////////////////////////////////////}

PROCEDURE SBD_Speaker_Mic;

CONST
	RGBmax = 65535; {Max value for setting RGB colors in VS fuctions}

VAR
	{Standard variables}
	s_ObjName                                               : STRING;
	h_Obj,h_ObjRecord,h_ObjWall                             : HANDLE;
	b_Result                                                : BOOLEAN;
	i_Counter                                               : INTEGER;
	{Script specific variables}
	r_TextScaler                                            : REAL;

{===== LOCAL FUNCTION DECLARATIONS =====}

{// See SalutzToolsFunctions.vss for additional fuctions //}
{$INCLUDE SalutzToolsFunctions.vss}

PROCEDURE Scale_to_Width (toScale, : HANDLE; widthSize : REAL);
VAR p1 : POINT;
BEGIN
	IF (HWidth(toScale) > widthSize) THEN BEGIN
		HCenter(toScale,p1.X,p1.Y);
		HScale2D(
		         toScale, p1.X, p1.Y, widthSize/HWidth(toScale),
		         widthSize/HWidth(toScale), TRUE
		         );
	END;
END;

{====================================}
{------------- < MAIN > -------------}
{====================================}

{// Retrieve plug-in object information //}
BEGIN IF GetCustomObjectInfo(s_ObjName,h_Obj,h_ObjRecord,h_ObjWall) THEN BEGIN
	Set_Version_Info('0 . 6');
	Use_PIO_Text_Attributes(h_Obj);
	{===== Parameter Limits =====}
	{===== Variable Setup =====}

	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
	Fill_WtoB(0);
	Pen_WtoB(1);
	TextFace([]);
	r_TextScaler := 48/GetLScale(Find_Layer(h_Obj));

	IF PTYPE = 'Speaker' THEN BEGIN
		SetParameterVisibility(h_Obj,'__ActiveOrPassive',TRUE);

		MoveTo(0,0);
		Relative; {````````````````````````````````````````}
		BeginPoly;
		Add2DVertex(0,0,0,0);
		Add2DVertex(6in,0,0,0);
		Add2DVertex(0,3in,0,0);
		Add2DVertex(5in,0,0,0);
		Add2DVertex(0,-3in,0,0);
		Add2DVertex(0,3in,0,0);
		Add2DVertex(5in,2.5in,0,0);
		Add2DVertex(0,-11in,0,0);
		Add2DVertex(-5in,2.5in,0,0);
		Add2DVertex(0,3in,0,0);
		Add2DVertex(0,-3in,0,0);
		Add2DVertex(-5in,0,0,0);
		Add2DVertex(0,3in,0,0);
		Add2DVertex(-6in,0,0,0);
		EndPoly;
		Absolute; {________________________________________}

		IF P__ACTIVEORPASSIVE = 'Active' THEN BEGIN
			TextSize(3*r_TextScaler);
			TextOrigin(5.625in,-1.75in);
			TextJust(3);
			TextVerticalAlign(1);
			CreateText('PWR');

			MoveTo(3,0);
			Relative; {````````````````````````````````````````}
			BeginPoly;
			Add2DVertex(0,0,0,0);
			Add2DVertex(0,1.875in,0,0);
			Add2DVertex(3in,-1.875in,0,0);
			Add2DVertex(-3in,-1.875in,0,0);
			Add2DVertex(0,1.875in,0,0);
			EndPoly;
			Absolute; {________________________________________}
		END;

		{ID}
		TextSize(6*r_TextScaler);
		TextJust(2);
		TextVerticalAlign(3);
		TextOrigin(11in,0);
		CreateText(Concat(PPREFIX,PIDNUM));
		IF Len(PPREFIX)>0
			THEN SetTextSize(LNewObj,0,Len(PPREFIX),GetTextSize(LNewObj,0)-1);
		IF (PPREFIX <> '') OR (PIDNUM <> '') THEN BEGIN
			Scale_to_Width(LNewObj,9.75in);
			b_Result := SetOpacityN(LNewObj,100,90);
		END;

		{Model}
		Fill_WtoB(0);
		TextJust(1);
		TextVerticalAlign(5);
		TextOrigin(16.75in,0.25in);
		CreateText(Concat(PMANUFACTURER,' ',PMODEL));

		{Purpose}
		Pen_WtoB(0.5);
		NameClass(PCLASSPURP);
		TextFace([Italic]);
		TextVerticalAlign(1);
		TextOrigin(16.75in,-0.25in);
		CreateText(Concat(PPURPOSE,' '));
		Set_Tight_TextFill(LNewObj,FALSE);


	END ELSE

	IF PTYPE = 'Microphone' THEN BEGIN
		SetParameterVisibility(h_Obj,'__ActiveOrPassive',TRUE);
		MoveTo(0,0);
		Relative; {````````````````````````````````````````}
		BeginPoly;
		Add2DVertex(0,0,0,0);
		Add2DVertex(-8in,0,0,0);
		Add2DVertex(-3in,3in,4,4in);
		Add2DVertex(-3in,-3in,0,3in);
		Add2DVertex(0,3in,0,0);
		Add2DVertex(0,-6in,0,0);
		Add2DVertex(0,3in,0,0);
		Add2DVertex(3in,-3in,4,4in);
		Add2DVertex(3in,3in,0,3in);
		Add2DVertex(8in,0,0,0);
		EndPoly;
		Absolute; {________________________________________}

		{ID}
		TextSize(6*r_TextScaler);
		TextJust(2);
		TextVerticalAlign(3);
		TextOrigin(-11in,0);
		FillPat(0);
		CreateText(Concat(PPREFIX,PIDNUM));
		IF Len(PPREFIX)>0
			THEN SetTextSize(LNewObj,0,Len(PPREFIX),GetTextSize(LNewObj,0)-1);
		IF (PPREFIX <> '') OR (PIDNUM <> '') THEN Scale_to_Width(LNewObj,5.5in);

		{Model}
		Fill_WtoB(0);
		TextSize(3.5*r_TextScaler);
		TextJust(3);
		TextVerticalAlign(5);
		TextOrigin(-14.75in,0);
		CreateText(Concat(PMANUFACTURER,' ',PMODEL));

		{Purpose}
		Pen_WtoB(0.5);
		NameClass(PCLASSPURP);
		TextFace([Italic]);
		TextVerticalAlign(1);
		TextOrigin(-14.75in,0);
		CreateText(Concat(PPURPOSE,' '));
		Set_Tight_TextFill(LNewObj,FALSE);
	END ELSE IF PTYPE = 'Source' THEN BEGIN
		SetParameterVisibility(h_Obj,'__ActiveOrPassive',TRUE);
		MoveTo(0,0);
		Relative; {````````````````````````````````````````}
		BeginPoly;
		Add2DVertex(0,0,0,0);
		Add2DVertex(-7in,0,0,0);
		Add2DVertex(0,3in,0,0);
		Add2DVertex(-7in,0,0,0);
		Add2DVertex(0,-6in,0,0);
		Add2DVertex(7in,0,0,0);
		Add2DVertex(0,3in,0,0);
		{ Add2DVertex(-3in,3in,4,4in); }
		{ Add2DVertex(-3in,-3in,0,3in); }
		{ Add2DVertex(0,3in,0,0); }
		{ Add2DVertex(0,-6in,0,0); }
		{ Add2DVertex(0,3in,0,0); }
		{ Add2DVertex(3in,-3in,4,4in); }
		{ Add2DVertex(3in,3in,0,3in); }
		Add2DVertex(7in,0,0,0);
		EndPoly;
		Absolute; {________________________________________}

		{ID}
		TextSize(6*r_TextScaler);
		TextJust(2);
		TextVerticalAlign(3);
		TextOrigin(-10.5in,0);
		FillPat(0);
		CreateText(Concat(PPREFIX,PIDNUM));
		IF Len(PPREFIX)>0
			THEN SetTextSize(LNewObj,0,Len(PPREFIX),GetTextSize(LNewObj,0)-1);
		IF (PPREFIX <> '') OR (PIDNUM <> '') THEN Scale_to_Width(LNewObj,5.5in);

		{Model}
		Fill_WtoB(0);
		TextSize(3.5*r_TextScaler);
		TextJust(3);
		TextVerticalAlign(5);
		TextOrigin(-14.75in,0);
		CreateText(Concat(PMANUFACTURER,' ',PMODEL));

		{Purpose}
		Pen_WtoB(0.5);
		NameClass(PCLASSPURP);
		TextFace([Italic]);
		TextVerticalAlign(1);
		TextOrigin(-14.75in,0);
		CreateText(Concat(PPURPOSE,' '));
		Set_Tight_TextFill(LNewObj,FALSE);


	END ELSE IF PTYPE = 'Fly Off' THEN BEGIN
		SetParameterVisibility(h_Obj,'Manufacturer',FALSE);
		SetParameterVisibility(h_Obj,'Model',FALSE);
		SetParameterVisibility(h_Obj,'ClassPurp',FALSE);

		BeginPoly;
		Add2DVertex(5.25in,0,0,0);
		Add2DVertex(2.625in,4.5in,0,0);
		Add2DVertex(-2.625in,4.5in,0,0);
		Add2DVertex(-5.25in,0,0,0);
		Add2DVertex(-2.625in,-4.5in,0,0);
		Add2DVertex(2.625in,-4.5in,0,0);
		Add2DVertex(5.25in,0,0,0);
		EndPoly;

		{ID}
		TextSize(8*r_TextScaler);
		TextJust(2);
		TextVerticalAlign(3);
		TextOrigin(0,0);
		FillPat(0);
		CreateText(Concat(PPREFIX,PIDNUM));
		Scale_to_Width(LNewObj,8in);
	END;

	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}
END; END; Run(SBD_Speaker_Mic);

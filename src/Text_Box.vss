{//////////////////////////////////////////////////////////////////////////////
//  Developed by John Salutz, (c) 2020. Please share freely.
//
//  This script creates a text label object with a double rectangle border.
//////////////////////////////////////////////////////////////////////////////}

{//////////////////////////////////////////////////////////////////////////////
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//  <https://www.gnu.org/licenses/>
//////////////////////////////////////////////////////////////////////////////}

PROCEDURE Text_Box;

CONST
	RGBmax = 65535; {Max value for setting RGB colors in VS fuctions}

VAR
	{Standard variables}
	s_ObjName                                               : STRING;
	h_Obj,h_ObjRecord,h_ObjWall                             : HANDLE;
	b_Result                                                : BOOLEAN;
	i_Counter                                               : INTEGER;
	{Script specific variables}
	r_ArrowWidth,r_ArrowLength                              : REAL;
	h_BackRect,h_FrontRect,h_Text,h_UnLine                  : HANDLE;
	p_Tmp1,p_Tmp2                                           : POINT;
	li_Dash                                                 : LONGINT;


{===== LOCAL FUNCTION DECLARATIONS =====}

{// See SalutzToolsFunctions.vss for additional fuctions //}
{$INCLUDE SalutzToolsFunctions.vss}

{ {\// Sets Version info parameter //!{\ }
{ PROCEDURE Set_Version_Info(s : STRING); }
{ BEGIN }
{ 	SetRField(h_Obj,s_ObjName,'ver',s); }
{ END; }

{ {\// Sets the specified text object to use the attributes of PIO //!{\ }
{ PROCEDURE Use_PIO_Text_Attributes (h : HANDLE); }
{ BEGIN }
{ 	SetObjectVariableBoolean(h,800,True); }
{ END; }

{ {\// Sets Background Fore and Back as White to Black, percentage set by 'r', }
{ 	format 0=White, 0.1 thru 0.9=10% to 90%, 1=Black //!{\ }
{ PROCEDURE Fill_WtoB (r : REAL); }
{ VAR i : LONGINT; }
{ BEGIN }
{ 	IF r<0 THEN r:=0; }
{ 	IF r>1 THEN r:=1; }
{ 	i := Trunc(RGBmax*(1-r)); }
{ 	FillPat(1); }
{ 	FillBack(i,i,i); }
{ END; }

{ {\// Sets Pen Fore and Back as White to Black, percentage set by 'r', }
{ 	format 0=White, 0.1 thru 0.9=10% to 90%, 1=Black //!{\ }
{ PROCEDURE Pen_WtoB (r : REAL); }
{ VAR i : LONGINT; }
{ BEGIN }
{ 	IF r<0 THEN r:=0; }
{ 	IF r>1 THEN r:=1; }
{ 	i := Trunc(RGBmax*(1-r)); }
{ 	PenPatN(2); }
{ 	PenFore(i,i,i); }
{ END; }

{// Draws a rectangle or a rounded rectangle based on 'roundTrue' //}
FUNCTION RectOrRRect(x1,y1,x2,y2 : REAL; roundTrue :BOOLEAN) : HANDLE;
VAR r_RRectDiam : REAL;
BEGIN
	IF roundTrue THEN BEGIN
		r_RRectDiam := POFFSET_EDGE*2;
		RRect(x1,y1,x2,y2,r_RRectDiam,r_RRectDiam);
	END {IF roundTrue} ELSE BEGIN
		r_RRectDiam := 0;
		Rect(x1,y1,x2,y2);
	END;
	RectOrRRect := LNewObj;
END;

{// Draws a rectangle offset from the passed obj //}
FUNCTION DrawOffsetRect(
		offsetFrom : HANDLE; offset : REAL; roundTrue : BOOLEAN
		) : HANDLE;
VAR Pt1,Pt2 : POINT;
BEGIN
	GetBBox(offsetFrom,Pt1.X,Pt1.Y,Pt2.X,Pt2.Y);
	DrawOffsetRect := RectOrRRect(
			Pt1.X-offset, Pt1.Y+offset,
			Pt2.X+offset, Pt2.Y-offset, roundTrue
			);
END;

FUNCTION DashStyle_Cust(style : STRING) : LONGINT;
VAR li_Dash : LONGINT;
BEGIN
	IF style = 'Solid' THEN li_Dash := 2
	ELSE IF style='Dashed' THEN BEGIN
		li_Dash := GetDashStyleIndexN(TRUE, 1, 0.12, 0.03);
		b_Result := SetDashLineTypeName(li_Dash, 'ISO-02 Dashed');
	END
	ELSE IF style='Dashed Spaced' THEN BEGIN
		li_Dash := GetDashStyleIndexN(TRUE, 1, 0.12, 0.18);
		b_Result := SetDashLineTypeName(li_Dash, 'ISO-03 Dashed Spaced');
	END
	ELSE IF style='Dotted' THEN BEGIN
		li_Dash := GetDashStyleIndexN(TRUE, 1, 0.005, 0.03);
		b_Result := SetDashLineTypeName(li_Dash, 'ISO-07 Dotted');
	END
	ELSE IF style='None' THEN li_Dash := 0;
	DashStyle_Cust := li_Dash;
END;

{====================================}
{------------- < MAIN > -------------}
{====================================}

{// retrieve plug-in object information //}
BEGIN IF GetCustomObjectInfo(s_ObjName,h_Obj,h_ObjRecord,h_ObjWall) THEN BEGIN
	Set_Version_Info('0 . 5 . 2');
	Use_PIO_Text_Attributes(h_Obj);

	{===== Variable Assignment =====}

	{===== Parameter checking =====}
	IF (PLABEL='') THEN BEGIN
		SetRField(h_Obj,s_ObjName,'Label', '-');
		AlrtDialog('Label may not be left blank.');
		ResetObject(h_Obj);
	END;
	IF (POFFSET_EDGE<0) THEN BEGIN
		SetRField(h_Obj,s_ObjName,'Offset Edge', '0');
		AlertInform(
		            'Offset Out of Bounds',
		            'Offset may not be less than 0 (zero).', FALSE
		            );
		ResetObject(h_Obj);
	END;
	IF (PPAD<0) THEN BEGIN
		SetRField(h_Obj,s_ObjName,'Pad', '0');
		AlertInform(
		            'Pad Out of Bounds',
		            'Pad may not be less than 0 (zero).', FALSE
		            );
		ResetObject(h_Obj);
	END;

	{===== Hide Additional Arrow Settings =====}
	IF PARROWPLACE='No Arrow' THEN BEGIN
		SetParameterVisibility(h_Obj,'ArrowScaleNote',FALSE);
		SetParameterVisibility(h_Obj,'ArrowLScale',FALSE);
		SetParameterVisibility(h_Obj,'ArrowWScale',FALSE);
	END ELSE BEGIN
		SetParameterVisibility(h_Obj,'ArrowScaleNote',TRUE);
		SetParameterVisibility(h_Obj,'ArrowLScale',TRUE);
		SetParameterVisibility(h_Obj,'ArrowWScale',TRUE);
	END;

	{===== Setup text creation =====}
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
	TextJust(2);
	TextVerticalAlign(3);
	TextRotate(0);
	TextOrigin(0,0);

	{===== Text creation and background =====}
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
	FillPat(0);
	IF (PTEXTCOLOR='Keep Text Black') THEN Pen_WtoB(1);
	CreateText(PLABEL);
	h_Text := LNewObj;
	{// Underline //}
	IF (PUNDERLINE=TRUE) THEN BEGIN
		PenPatN(2);
		PenSize(7);
		GetBBox(h_Text,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_Tmp2.Y);
		MoveTo(p_Tmp1.X,p_Tmp2.Y);
		LineTo(p_Tmp2.X,p_Tmp2.Y);
	END;
	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}

	{===== Create foreground rectangle =====}
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
	{// Set front rectangle fill & pen to none based on PINRECOP parameter //}
	IF (PINRECOP=TRUE) THEN BEGIN
		Fill_WtoB(0);
		PenSize(7);
		SetParameterVisibility(h_Obj,'Dash',TRUE);
		PenPatN(DashStyle_Cust(PDASH));
	END ELSE BEGIN
		SetParameterVisibility(h_Obj,'Dash',FALSE);
		FillPat(0);
		PenSize(0);
		PenPatN(0);
	END;
	h_FrontRect := DrawOffsetRect(h_Text,PPAD,PISROUNDED);
	HMoveBackward(h_FrontRect,TRUE);
	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}

	{===== Create background rectangle =====}
	h_BackRect := DrawOffsetRect(h_FrontRect,POFFSET_EDGE,PISROUNDED);
	HMoveBackward(h_BackRect,TRUE);

	{===== Create Arrow =====}
	IF (PARROWPLACE <> 'No Arrow') THEN BEGIN
		r_ArrowWidth := HHeight(h_BackRect) * PARROWWSCALE;
		r_ArrowLength := HHeight(h_BackRect)/2 * PARROWLSCALE;
		MoveTo(0,0);
		{// Draw Arrow //}
		Relative;
		BeginPoly;
		Add2DVertex(0,r_ArrowWidth/4,0,0);
		Add2DVertex(POFFSET_EDGE*2,0,0,0);
		Add2DVertex(0,r_ArrowWidth/4,0,0);
		Add2DVertex(r_ArrowLength,-r_ArrowWidth/2,0,0);
		Add2DVertex(-r_ArrowLength,-r_ArrowWidth/2,0,0);
		Add2DVertex(0,r_ArrowWidth/4,0,0);
		Add2DVertex(-POFFSET_EDGE*2,0,0,0);
		EndPoly;
		Absolute;
		SetPolyClosed(LNewObj,TRUE);
		{// Rotate Arrow and Move into place //}
		IF (PARROWPLACE = 'Right') THEN BEGIN
			HRotate(LNewObj,0,0,0);
			HMove(LNewObj,(HWidth(h_BackRect)/2)-POFFSET_EDGE,0);
		END
		ELSE IF (PARROWPLACE = 'Top') THEN BEGIN
			HRotate(LNewObj,0,0,90);
			HMove(LNewObj,0,(HHeight(h_BackRect)/2)-POFFSET_EDGE);
			END
		ELSE IF (PARROWPLACE = 'Left') THEN BEGIN
			HRotate(LNewObj,0,0,180);
			HMove(LNewObj,(-HWidth(h_BackRect)/2)+POFFSET_EDGE,0);
		END
		ELSE IF (PARROWPLACE = 'Bottom') THEN BEGIN
			HRotate(LNewObj,0,0,270);
			HMove(LNewObj,0,(-HHeight(h_BackRect)/2)+POFFSET_EDGE);
		END;
		h_BackRect := AddSurface(LNewObj,h_BackRect);
	END; {Create Arrow}

	{===== End sequence =====}
	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}
END; END; Run(Text_Box);

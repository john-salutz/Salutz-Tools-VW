{//////////////////////////////////////////////////////////////////////////////
//  Developed by John Salutz, (c) 2020. Please share freely.
//
//  SBD In-Out is a point based object for drawing input/output slots in
//  an audio signal flow diagram.
//////////////////////////////////////////////////////////////////////////////}

{//////////////////////////////////////////////////////////////////////////////
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//  <https://www.gnu.org/licenses/>
//////////////////////////////////////////////////////////////////////////////}

PROCEDURE SBD_InOut;

CONST
	RGBmax = 65535; {Max value for setting RGB colors in VS fuctions}

VAR
	{Standard variables}
	s_ObjName                                               : STRING;
	h_Obj,h_ObjRecord,h_ObjWall                             : HANDLE;
	b_Result                                                : BOOLEAN;
	i_Counter                                               : INTEGER;
	{Script specific variables}
	p_Origin,p_End,p_Leader,p_TextOffset                    : POINT;
	r_TextScaler,r_TextLarge,r_TextSmall                    : REAL;

{===== LOCAL FUNCTION DECLARATIONS =====}

{// See SalutzToolsFunctions.vss for additional fuctions //}
{$INCLUDE SalutzToolsFunctions.vss}

FUNCTION Get_2D_Pt(h : HANDLE) : POINT;
VAR p1 : POINT;
BEGIN
	GetSymLoc(h,p1.X,p1.Y);
	Get_2D_Pt := p1;
END;

FUNCTION Get_Handle_At_Pt(p1 : POINT; stype : STRING) : HANDLE;
VAR
	li_List                   : LONGINT;
	i_ListCount,i_NumPickObj  : INTEGER;
BEGIN
	li_List := FindObjAtPt_Create(NIL,1, 1, p1.x, p1.y, 1);
	i_NumPickObj := FindObjAtPt_GetCount(li_List);
	FOR i_ListCount:=0 TO i_NumPickObj DO BEGIN
		IF (GetObjectVariableString(
		    FindObjAtPt_GetObj(li_List,i_ListCount),1166
		    ) = stype)
			THEN Get_Handle_At_Pt := FindObjAtPt_GetObj(
			        li_List,i_ListCount
			        );
	END;
END;

{====================================}
{------------- < MAIN > -------------}
{====================================}

{// Retrieve plug-in object information //}
BEGIN IF GetCustomObjectInfo(s_ObjName,h_Obj,h_ObjRecord,h_ObjWall) THEN BEGIN
	Set_Version_Info('0 . 5 . 2');
	Use_PIO_Text_Attributes(h_Obj);
	{===== Parameter Limits =====}
	{===== Variable Setup =====}
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
	Fill_WtoB(0);
	Pen_WtoB(1);
	TextVerticalAlign(1);
	TextFace([]);
	r_TextScaler := 48/GetLScale(Find_Layer(h_Obj));
	p_Origin.X := 0;
	p_Leader.Y := 0;
	p_TextOffset.X := 5/8in;
	SetRField(
	          h_Obj,s_ObjName,'Parent',
	          STF_GetRField(
	                        Get_Handle_At_Pt(Get_2D_Pt(h_Obj),
	                        'SBD Device (Salutz)'),
	                        '__Parent'
	                        )
	          );

	{===== Draw Header =====}
	IF PTYPE = 'Header' THEN BEGIN
		Fill_WtoB(0.15);
		Rect(-11.5in,3in,11.5in,-3in);
		FillPat(0);
		TextSize(6*r_TextScaler);
		TextJust(2);
		TextVerticalAlign(3);
		TextFace([Bold]);
		TextOrigin(0,0);
		CreateText(PPREFIX);
		SetParameterVisibility(h_Obj,'Size',FALSE);
		SetParameterVisibility(h_Obj,'IDNum',FALSE);
		SetRField(h_Obj,s_ObjName,'IDNum','');
		SetParameterVisibility(h_Obj,'Routing',FALSE);
		SetRField(h_Obj,s_ObjName,'Routing','');
		SetParameterVisibility(h_Obj,'ClassRout',FALSE);
		SetParameterVisibility(h_Obj,'Purpose',FALSE);
		SetRField(h_Obj,s_ObjName,'Purpose','');
		SetParameterVisibility(h_Obj,'ClassPurp',FALSE);
		SetParameterVisibility(h_Obj,'Connector',FALSE);
		SetRField(h_Obj,s_ObjName,'Connector','');
	END ELSE IF PTYPE = 'Spacer' THEN BEGIN
		Fill_WtoB(0.05);
		Rect(-11.5in,3in,11.5in,-3in);
		FillPat(0);
		TextSize(6*r_TextScaler);
		TextJust(2);
		TextVerticalAlign(1);
		TextOrigin(0,3in);
		CreateText(Concat(UniChr(8942),UniChr(8942),UniChr(8942)));
		SetParameterVisibility(h_Obj,'Size',FALSE);
		SetParameterVisibility(h_Obj,'Prefix',FALSE);
		SetRField(h_Obj,s_ObjName,'Prefix','');
		SetParameterVisibility(h_Obj,'IDNum',FALSE);
		SetRField(h_Obj,s_ObjName,'IDNum','');
		SetParameterVisibility(h_Obj,'Routing',FALSE);
		SetRField(h_Obj,s_ObjName,'Routing','');
		SetParameterVisibility(h_Obj,'ClassRout',FALSE);
		SetParameterVisibility(h_Obj,'Purpose',FALSE);
		SetRField(h_Obj,s_ObjName,'Purpose','');
		SetParameterVisibility(h_Obj,'ClassPurp',FALSE);
		SetParameterVisibility(h_Obj,'Connector',FALSE);
		SetRField(h_Obj,s_ObjName,'Connector','');

	END ELSE BEGIN
		{===== Setup Size =====}
		IF PSIZE = 'Regular' THEN BEGIN
			p_Origin.Y := 6in;
			r_TextLarge := 8*r_TextScaler;
			r_TextSmall := 5*r_TextScaler;
			p_TextOffset.Y := 5/8in;
		END ELSE IF PSIZE = 'Small' THEN BEGIN
			p_Origin.Y := 4.5in;
			r_TextLarge := 7*r_TextScaler;
			r_TextSmall := 4*r_TextScaler;
			p_TextOffset.Y := 5/16in;
		END ELSE IF (PSIZE = 'Micro') OR (PSIZE = 'USITT') THEN BEGIN
			p_Origin.Y := 3in;
			r_TextLarge := 6*r_TextScaler;
			r_TextSmall := 3.5*r_TextScaler;
			p_TextOffset.Y := 5/32in;
		END;
		p_End.Y := -p_Origin.Y;

		{===== Setup Type =====}
		IF PTYPE = 'Input' THEN BEGIN
			p_End.X := 23in;
			p_Leader.X := -9in;
			TextJust(1);
			TextOrigin(1in,p_Origin.Y);
		END ELSE IF PTYPE = 'Output' THEN BEGIN
			p_End.X := -23in;
			p_Leader.X := 9in;
			TextJust(3);
			TextOrigin(-1in,p_Origin.Y);
			p_TextOffset.X := -p_TextOffset.X;
		END ELSE IF PTYPE = 'Thru' THEN BEGIN
			TextJust(2);
			TextOrigin(0,p_Origin.Y);
			p_Leader.X := -21in;
			p_Origin.X := -12in;
			p_End.X := 12in;
			p_TextOffset.X := -p_TextOffset.X+12in;
		END;

		{===== Draw Text =====}
		{// Draw ID/Number Text //}
		PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
		TextSize(r_TextLarge);
		FillPat(0);
		IF (PPREFIX <> '') AND (PSIZE <> 'USITT') THEN BEGIN
			CreateText(Concat(PPREFIX,' ',PIDNUM));
			SetTextSize(LNewObj,0,Len(PPREFIX)+1,GetTextSize(LNewObj,0)-1);
		END ELSE CreateText(PIDNUM);
		PopAttrs; {))))))))))))))))))))))))))))))))))))))))}

		{===== Draw Poly =====}
		BeginPoly;
		Add2DVertex(p_Leader.X,p_Leader.Y,0,0);
		Add2DVertex(p_Origin.X,0,0,0);
		Add2DVertex(p_Origin.X,p_Origin.Y,0,0);
		Add2DVertex(p_End.X,p_Origin.Y,0,0);
		IF PTYPE = 'Thru' THEN BEGIN
			Add2DVertex(p_End.X,0,0,0);
			Add2DVertex(-p_Leader.X,p_Leader.Y,0,0);
			Add2DVertex(p_End.X,0,0,0);
		END;
		Add2DVertex(p_End.X,p_End.Y,0,0);
		Add2DVertex(p_Origin.X,p_End.Y,0,0);
		Add2DVertex(p_Origin.X,0,0,0);
		EndPoly;
		HMoveBackward(LNewObj,TRUE);

		PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
		{// Draw Routing Text //}
		IF PSIZE <> 'USITT' THEN BEGIN
			NameClass(PCLASSROUT);
			FillPat(0);
			IF PTYPE = 'Output' THEN TextJust(1)
			ELSE IF (PTYPE = 'Input') OR (PTYPE = 'Thru') THEN TextJust(3);
			TextVerticalAlign(5);
			Pen_WtoB(0.5);
			IF PTYPE = 'Input'
				THEN TextOrigin(23in-p_TextOffset.X,p_End.Y+p_TextOffset.Y)
			ELSE IF (PTYPE = 'Output')
				THEN TextOrigin(-23in-p_TextOffset.X,p_End.Y+p_TextOffset.Y)
			ELSE TextOrigin(p_TextOffset.X,p_End.Y+p_TextOffset.Y);
			TextSize(r_TextSmall-1);
			IF PROUTING <> '' THEN CreateText(Concat(UniChr(187),PROUTING));
		END;

		{// Draw Purpose Text //}
		IF PSIZE <> 'USITT' THEN BEGIN
			{// Regular,Small, & Micro //}

			IF (PTYPE = 'Input') OR (PTYPE = 'Thru') THEN TextJust(3)
			ELSE IF (PTYPE = 'Output') THEN TextJust(1);
			TextVerticalAlign(5);
			Pen_WtoB(0.5);
			TextSize(r_TextSmall);
			FillPat(1);
			IF PTYPE = 'Thru'
				THEN TextOrigin(p_TextOffset.X-24in,p_TextOffset.Y)
			ELSE TextOrigin(-p_TextOffset.X*1.5,p_TextOffset.Y);
		END ELSE BEGIN
			{// USITT //}

			TextVerticalAlign(5);
			FillPat(0);
			IF PTYPE <> 'Thru' THEN BEGIN {In & Out}
				MoveTo((p_End.X/4),p_Origin.Y);
				LineTo((p_End.X/4),p_End.Y);
				TextSize(r_TextLarge-3);
				TextVerticalAlign(1);
				TextOrigin((p_End.X/4),p_Origin.Y);
			END ELSE BEGIN {Thru}
				TextOrigin(0,p_End.Y);
				TextJust(2);
				TextSize(r_TextSmall);
			END;
			Pen_WtoB(0.5);
		END;

		TextFace([Italic]);
		NameClass(PCLASSPURP);
		IF PPURPOSE <> '' THEN BEGIN
			IF PSIZE = 'USITT' THEN CreateText(Concat(' ',PPURPOSE,' '))
			ELSE CreateText(Concat(PPURPOSE,' '));
			IF PSIZE <> 'USITT' THEN HMoveBackward(LNewObj,TRUE);
			Set_Tight_TextFill(LNewObj,FALSE);
		END;

		PopAttrs; {))))))))))))))))))))))))))))))))))))))))}
	END;

	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}
END; END; Run(SBD_InOut);

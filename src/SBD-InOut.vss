{//////////////////////////////////////////////////////////////////////////////
//  Developed by John Salutz, (c) 2020. Please share freely.
//
//  SBD In-Out is a point based object for drawing input/output slots in
//  an audio signal flow diagram.
//////////////////////////////////////////////////////////////////////////////}

{//////////////////////////////////////////////////////////////////////////////
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//  <https://www.gnu.org/licenses/>
//////////////////////////////////////////////////////////////////////////////}

PROCEDURE SBD_InOut;

CONST
	RGBmax = 65535; {Max value for setting RGB colors in VS fuctions}

VAR
	{Standard variables}
	s_ObjName                                               : STRING;
	h_Obj,h_ObjRecord,h_ObjWall                             : HANDLE;
	b_Result                                                : BOOLEAN;
	i_Counter                                               : INTEGER;
	{Script specific variables}
	p_Origin,p_End,p_Leader,p_TextOffset                    : POINT;
	r_TextScaler,r_TextLarge,r_TextSmall                    : REAL;

{===== LOCAL FUNCTION DECLARATIONS =====}

{// Sets Version info parameter //}
PROCEDURE Set_Version_Info(s : STRING);
BEGIN
	SetRField(h_Obj,s_ObjName,'ver',s);
END;

{// Sets the specified text object to use the attributes of PIO //}
PROCEDURE Use_PIO_Text_Attributes (h : HANDLE);
BEGIN
	SetObjectVariableBoolean(h,800,True);
END;

{// Sets Background Fore and Back as White to Black, percentage set by 'r',
	format 0=White, 0.1 thru 0.9=10% to 90%, 1=Black //}
PROCEDURE Fill_WtoB (r : REAL);
VAR i : LONGINT;
BEGIN
	IF r<0 THEN r:=0;
	IF r>1 THEN r:=1;
	i := Trunc(RGBmax*(1-r));
	FillPat(1);
	FillBack(i,i,i);
END;

{// Sets Pen Fore and Back as White to Black, percentage set by 'r',
	format 0=White, 0.1 thru 0.9=10% to 90%, 1=Black //}
PROCEDURE Pen_WtoB (r : REAL);
VAR i : LONGINT;
BEGIN
	IF r<0 THEN r:=0;
	IF r>1 THEN r:=1;
	i := Trunc(RGBmax*(1-r));
	PenPatN(2);
	PenFore(i,i,i);
END;

PROCEDURE Set_Tight_TextFill (h : HANDLE;b : BOOLEAN);
BEGIN
	SetObjectVariableBoolean(h,684,b);
END;

FUNCTION Find_Layer (obj : HANDLE) : HANDLE;
BEGIN
	IF GetLayer(obj) = NIL THEN ResetObject(obj)
	ELSE Find_Layer := GetLayer(obj);
END;

{Sets Object Begin and End Markers to custom, 'Dot' OR 'Arrow'}
PROCEDURE Set_Markers_Cust (h : HANDLE;sBeg:STRING;sEnd:STRING);
VAR b	  : BOOLEAN;
	ActLS : REAL;
BEGIN
	ActLS := GetLScale(Find_Layer(h_Obj));
	IF sBeg = 'Dot' THEN {Dot}
		b := SetObjBeginningMarker(h,2,0,1/ActLS,1/ActLS,0,0,TRUE)
	ELSE IF sBeg = 'Arrow' THEN {Arrow}
		b := SetObjBeginningMarker(h,2176,15,3/ActLS,2/ActLS,0,0,TRUE);
	IF sEnd	 = 'Dot' THEN {Dot}
		b := SetObjEndMarker(h,2,0,1/ActLS,1/ActLS,0,0,TRUE)
	ELSE IF sEnd = 'Arrow' THEN {Arrow}
		b := SetObjEndMarker(h,2176,15,3/ActLS,2/ActLS,0,0,TRUE);
END;

FUNCTION Get_2D_Pt(h : HANDLE) : POINT;
VAR p1 : POINT;
BEGIN
	GetSymLoc(h,p1.X,p1.Y);
	Get_2D_Pt := p1;
END;

FUNCTION Get_Handle_At_Pt(p1 : POINT; stype : STRING) : HANDLE;
VAR
	li_List                   : LONGINT;
	i_ListCount,i_NumPickObj  : INTEGER;
BEGIN
	li_List := FindObjAtPt_Create(NIL,1, 1, p1.x, p1.y, 1);
	i_NumPickObj := FindObjAtPt_GetCount(li_List);
	FOR i_ListCount:=0 TO i_NumPickObj DO BEGIN
		IF (GetObjectVariableString(
			FindObjAtPt_GetObj(li_List,i_ListCount),1166
			) = stype)
			THEN Get_Handle_At_Pt := FindObjAtPt_GetObj(
					li_List,i_ListCount
					);
	END;
END;

{// Returns a string of the RackID of Rack Obj found at point //}
FUNCTION Get_EquipName(h : HANDLE) : STRING;
BEGIN
	Get_EquipName := GetRField(
			h, GetName(GetRecord(h,NumRecords(h))), '__Parent'
			);
END;

{====================================}
{------------- < MAIN > -------------}
{====================================}

{// Retrieve plug-in object information //}
BEGIN IF GetCustomObjectInfo(s_ObjName,h_Obj,h_ObjRecord,h_ObjWall) THEN BEGIN
	Set_Version_Info('0 . 4');
	Use_PIO_Text_Attributes(h_Obj);
	{===== Parameter Limits =====}
	{===== Variable Setup =====}
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
	Fill_WtoB(0);
	Pen_WtoB(1);
	TextVerticalAlign(3);
	TextFace([]);
	r_TextScaler := 48/GetLScale(Find_Layer(h_Obj));
	p_Origin.X := 0;
	p_Leader.Y := 0;
	p_TextOffset.X := 5/8;
	SetRField(h_Obj,s_ObjName,'Parent',
			Get_EquipName(
					Get_Handle_At_Pt(Get_2D_Pt(h_Obj),'SBD Device (Salutz)')
					)
			);


	{===== Setup Size =====}
	IF PSIZE = 'Regular' THEN BEGIN
		p_Origin.Y := 6;
		r_TextLarge := 8*r_TextScaler;
		r_TextSmall := 6*r_TextScaler;
		p_TextOffset.Y := 5/8;
	END ELSE IF PSIZE = 'Small' THEN BEGIN
		p_Origin.Y := 4.5;
		r_TextLarge := 7*r_TextScaler;
		r_TextSmall := 4*r_TextScaler;
		p_TextOffset.Y := 5/16;
	END ELSE IF PSIZE = 'Smaller' THEN BEGIN
		p_Origin.Y := 3;
		r_TextLarge := 6*r_TextScaler;
		r_TextSmall := 3.5*r_TextScaler;
		p_TextOffset.Y := 5/32;
	END;
	p_End.Y := -p_Origin.Y;

	{===== Setup Type =====}
	IF PTYPE = 'Input' THEN BEGIN
		p_End.X := 23;
		p_Leader.X := -9;
		TextJust(1);
		TextOrigin(1,0);
	END ELSE IF PTYPE = 'Output' THEN BEGIN
		p_End.X := -23;
		p_Leader.X := 9;
		TextJust(3);
		TextOrigin(-1,0);
		p_TextOffset.X := -p_TextOffset.X;
	END ELSE IF PTYPE = 'Thru' THEN BEGIN
		TextJust(2);
		TextOrigin(0,0);
		p_Leader.X := -21;
		p_Origin.X := -12;
		p_End.X := 12;
		p_TextOffset.X := -p_TextOffset.X-12;
	END;

	{===== Draw Text =====}
	{// Draw ID/Number Text //}
	TextSize(r_TextLarge);
	IF PPREFIX <> '' THEN BEGIN
		CreateText(Concat(PPREFIX,' ',PIDNUM));
		SetTextSize(LNewObj,0,Len(PPREFIX)+1,GetTextSize(LNewObj,0)-1);
	END ELSE CreateText(PIDNUM);

	{===== Draw Poly =====}
	BeginPoly;
	Add2DVertex(p_Leader.X,p_Leader.Y,0,0);
	Add2DVertex(p_Origin.X,0,0,0);
	Add2DVertex(p_Origin.X,p_Origin.Y,0,0);
	Add2DVertex(p_End.X,p_Origin.Y,0,0);
	IF PTYPE = 'Thru' THEN BEGIN
		Add2DVertex(p_End.X,0,0,0);
		Add2DVertex(-p_Leader.X,p_Leader.Y,0,0);
		Add2DVertex(p_End.X,0,0,0);
	END;
	Add2DVertex(p_End.X,p_End.Y,0,0);
	Add2DVertex(p_Origin.X,p_End.Y,0,0);
	Add2DVertex(p_Origin.X,0,0,0);
	EndPoly;
	HMoveBackward(LNewObj,TRUE);


	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}

	{// Draw Routing Text //}
	NameClass(PCLASSROUT);
	IF PTYPE = 'Input' THEN TextJust(3)
	ELSE IF (PTYPE = 'Output') OR (PTYPE = 'Thru') THEN TextJust(1);
	TextVerticalAlign(1);
	Pen_WtoB(0.5);
	TextOrigin(-p_TextOffset.X,-p_TextOffset.Y);
	TextSize(r_TextSmall-1);
	IF PROUTING <> '' THEN CreateText(Concat(UniChr(187),PROUTING));
	HMoveBackward(LNewObj,TRUE);

	{// Draw Purpose Text //}
	IF PTYPE = 'Thru' THEN TextJust(3);
	TextVerticalAlign(5);
	TextSize(r_TextSmall);
	IF PTYPE = 'Thru' THEN TextOrigin(p_TextOffset.X,p_TextOffset.Y)
	ELSE TextOrigin(-p_TextOffset.X*1.5,p_TextOffset.Y);
	TextFace([Italic]);
	NameClass(PCLASSPURP);
	CreateText(PPURPOSE);
	HMoveBackward(LNewObj,TRUE);

	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}



	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}
END; END; Run(SBD_InOut);

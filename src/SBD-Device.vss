{//////////////////////////////////////////////////////////////////////////////
//  Developed by John Salutz, (c) 2020. Please share freely.
//
//  SBD Device is a point based object for drawing general equipment in
//  an audio signal flow diagram.
//////////////////////////////////////////////////////////////////////////////}

{//////////////////////////////////////////////////////////////////////////////
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 2.1 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
//  <https://www.gnu.org/licenses/>
//////////////////////////////////////////////////////////////////////////////}

PROCEDURE SBD_Device;

CONST
	RGBmax   = 65535; {Max value for setting RGB colors in VS fuctions}
	RegularH = 12in;
	SmallH   = 9in;
	MicroH   = 6in;

VAR
	{Standard variables}
	s_ObjName                                               : STRING;
	h_Obj,h_ObjRecord,h_ObjWall                             : HANDLE;
	b_Result,b_ResetObj,b_ResetChild                        : BOOLEAN;
	i_Counter                                               : INTEGER;
	{Script specific variables}
	p_Tmp1,p_Tmp2                                           : POINT;
	r_TextScaler                                            : REAL;
	r_Height,r_Space,r_Width                                : REAL;


{===== LOCAL FUNCTION DECLARATIONS =====}

{// See SalutzToolsFunctions.vss for additional fuctions //}
{$INCLUDE SalutzToolsFunctions.vss}

PROCEDURE Scale_Fit_Width_Real (toScale : HANDLE; fitTo,scaleFactor : REAL);
VAR p1 : POINT;
BEGIN
	HCenter(toScale,p1.X,p1.Y);
	HScale2D(
	        toScale, p1.X, p1.Y, fitTo*scaleFactor/HWidth(toScale),
	        fitTo*scaleFactor/HWidth(toScale), TRUE
	        );
END;

{====================================}
{------------- < MAIN > -------------}
{====================================}

{// Retrieve plug-in object information //}
BEGIN IF GetCustomObjectInfo(s_ObjName,h_Obj,h_ObjRecord,h_ObjWall) THEN BEGIN
	Set_Version_Info('0 . 6 . 7');
	Use_PIO_Text_Attributes(h_Obj);
	{===== Parameter Limits =====}
	IF (PNUMSPACES<0) THEN BEGIN
		SetRField(h_Obj,s_ObjName,'NumSpaces', '0');
		ResetObject(h_Obj);
	END;
	{===== Variable Setup =====}
	b_ResetObj := FALSE;
	b_ResetChild := FALSE;
	IF (P__PARENT <> Concat(PTYPE,' ',PPREFIX,PIDNUM,' (',
	                       PMANUFACTURER,' ',PMODEL,')'))
		THEN BEGIN
			SetRField(
			          h_Obj,s_ObjName,'__Parent',
			          Concat(PTYPE,' ',PPREFIX,PIDNUM,' (',
			          PMANUFACTURER,' ',PMODEL,')')
			          );
			b_ResetChild := TRUE;
		END;
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
	Fill_WtoB(0.035);
	Pen_WtoB(1);

	TextFace([]);
	r_TextScaler := 48/GetLScale(Find_Layer(h_Obj));


	{===== Setup Size =====}
	IF PSIZE = 'Regular' THEN BEGIN
		r_Height := RegularH;
	END ELSE IF PSIZE = 'Small' THEN BEGIN
		r_Height := SmallH;
	END ELSE IF PSIZE = 'Micro' THEN BEGIN
		r_Height := MicroH;
	END;
	IF PSPACESIZE = 'Regular' THEN BEGIN
		r_Space := RegularH;
	END ELSE IF PSPACESIZE = 'Small' THEN BEGIN
		r_Space := SmallH;
	END ELSE IF PSPACESIZE = 'Micro' THEN BEGIN
		r_Space := MicroH;
	END;
	IF PCOLWIDTH = 'Single' THEN r_Width := 24in
	ELSE IF (PCOLWIDTH = 'Double')
		OR (PCOLWIDTH = 'Break Bottom') THEN r_Width := 48in
	ELSE r_Width := 36in;

	Rect(-r_Width/2,r_Height,r_Width/2,0);

	TextSize(7*r_TextScaler);
	Fill_WtoB(0);
	TextVerticalAlign(5);
	TextJust(1);
	TextOrigin(-r_Width/2,r_Height);
	IF (PMANUFACTURER = '') THEN CreateText(PMODEL)
	ELSE CreateText(Concat(PMANUFACTURER,' ',PMODEL));
	HMoveBackward(LNewObj,TRUE);
	FillPat(0);
	TextVerticalAlign(1);
	TextJust(2);
	TextOrigin(0,r_Height);
	IF (PPURPOSE <> '') THEN CreateText(PPURPOSE)
	ELSE CreateText(' ');
	GetBBox(LNewObj,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_Tmp2.Y);
	IF HWidth(LNewObj)>r_Width THEN Scale_Fit_Width_Real(LNewObj,r_Width,0.95);

	IF PSIZE <> 'Micro' THEN BEGIN
		TextFace([Italic]);
		TextSize(4*r_TextScaler);
		TextOrigin(0,p_Tmp2.Y);
		IF (PLOCATION <> '') THEN CreateText(Concat('@',PLOCATION))
		ELSE CreateText(' ');
		IF PSIZE <> 'Small' THEN BEGIN
			TextFace([]);
			Pen_WtoB(0.5);
			TextSize(3*r_TextScaler);
			GetBBox(LNewObj,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_Tmp2.Y);
			TextOrigin(0,p_Tmp2.Y);
			IF PSHOWNOTE THEN CreateText(PNOTES);

			TextSize(2*r_TextScaler);
			TextOrigin((-r_Width/2)+0.25in,0.25in);
			TextJust(1);
			TextVerticalAlign(5);
			IF PIDNUM <> '0' THEN CreateText(Concat(PTYPE,' ',PPREFIX,PIDNUM))
			ELSE CreateText(PTYPE);
			TextOrigin((r_Width/2)-0.25in,0.25in);
			TextJust(3);
			CreateText(PIP);
		END;
	END;

	IF PNUMSPACES > 0 THEN BEGIN
		Fill_WtoB(0.15);
		Pen_WtoB(1);

		IF (PCOLWIDTH = 'Double') OR (PCOLWIDTH = 'Single') THEN
			Rect(-r_Width/2,0,r_Width/2,(-r_Space*PNUMSPACES))
		ELSE BEGIN
			MoveTo(-r_Width/2,0);
			Relative; {````````````````````````````````````````}
			BeginPoly;
			Add2DVertex(0,0,0,0);

			IF PCOLWIDTH = 'Break Left' THEN BEGIN
				Add2DVertex(4.5in,-(r_Space*PNUMSPACES)/4,2,0);
				Add2DVertex(-3in,-(r_Space*PNUMSPACES)/2,2,0);
				Add2DVertex(1.5in,-(r_Space*PNUMSPACES)/4,0,0);
				Add2DVertex(3in,0,0,0);
				Add2DVertex(r_Width-6in,0,0,0);
				Add2DVertex(0,(r_Space*PNUMSPACES),0,0);

			END ELSE IF PCOLWIDTH = 'Break Bottom' THEN BEGIN
				Add2DVertex(0,-(r_Space*PNUMSPACES)-3in,0,0);
				Add2DVertex(r_Width/4,1.5in,2,0);
				Add2DVertex(r_Width/2,-3in,2,0);
				Add2DVertex(r_Width/4,4.5in,0,0);
				Add2DVertex(0,(r_Space*PNUMSPACES),0,0);

			END ELSE IF PCOLWIDTH = 'Break Right' THEN BEGIN
				Add2DVertex(0,-(r_Space*PNUMSPACES),0,0);
				Add2DVertex(r_Width+3in,0,0,0);
				Add2DVertex(-1.5in,(r_Space*PNUMSPACES)/4,2,0);
				Add2DVertex(3in,(r_Space*PNUMSPACES)/2,2,0);
				Add2DVertex(-4.5in,(r_Space*PNUMSPACES)/4,0,0);
			END;
			Add2DVertex(-r_Width,0,0,0);
			EndPoly;
			Absolute; {________________________________________}
		END;

		HMoveBackward(LNewObj,TRUE);
		MoveTo(-r_Width/2,-3in);
		PenSize(0);
		Relative;
		FOR i_Counter:=2 TO (PNUMSPACES*(r_Space/3)) DO BEGIN
			LineTo(r_Width,0);
			MoveTo(-r_Width,-3in);
		END;
		Absolute;
	END;

	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}
	IF b_ResetChild THEN Refresh_Children(h_Obj,'SBD In-Out (Salutz)');

END; END; Run(SBD_Device);

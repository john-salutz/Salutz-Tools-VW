{//////////////////////////////////////////////////////////////////////////////
//  Developed by John Salutz, (c) 2020. Please share freely.
//
//  SBD Device is a point based object for drawing general equipment in
//  an audio signal flow diagram.
//////////////////////////////////////////////////////////////////////////////}

{//////////////////////////////////////////////////////////////////////////////
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//  <https://www.gnu.org/licenses/>
//////////////////////////////////////////////////////////////////////////////}

PROCEDURE SBD_Device;

CONST
	RGBmax   = 65535; {Max value for setting RGB colors in VS fuctions}
	RegularH = 12;
	SmallH   = 9;
	SmallerH = 6;

VAR
	{Standard variables}
	s_ObjName                                               : STRING;
	h_Obj,h_ObjRecord,h_ObjWall                             : HANDLE;
	b_Result                                                : BOOLEAN;
	i_Counter                                               : INTEGER;
	{Script specific variables}
	p_Tmp1,p_Tmp2                                           : POINT;
	r_TextScaler                                            : REAL;
	r_Height,r_Space                                        : REAL;


{===== LOCAL FUNCTION DECLARATIONS =====}

{// Sets Version info parameter //}
PROCEDURE Set_Version_Info(s : STRING);
BEGIN
	SetRField(h_Obj,s_ObjName,'ver',s);
END;

{// Sets the specified text object to use the attributes of PIO //}
PROCEDURE Use_PIO_Text_Attributes (h : HANDLE);
BEGIN
	SetObjectVariableBoolean(h,800,True);
END;

{// Sets Background Fore and Back as White to Black, percentage set by 'r',
	format 0=White, 0.1 thru 0.9=10% to 90%, 1=Black //}
PROCEDURE Fill_WtoB (r : REAL);
VAR i : LONGINT;
BEGIN
	IF r<0 THEN r:=0;
	IF r>1 THEN r:=1;
	i := Trunc(RGBmax*(1-r));
	FillPat(1);
	FillBack(i,i,i);
END;

{// Sets Pen Fore and Back as White to Black, percentage set by 'r',
	format 0=White, 0.1 thru 0.9=10% to 90%, 1=Black //}
PROCEDURE Pen_WtoB (r : REAL);
VAR i : LONGINT;
BEGIN
	IF r<0 THEN r:=0;
	IF r>1 THEN r:=1;
	i := Trunc(RGBmax*(1-r));
	PenPatN(2);
	PenFore(i,i,i);
END;

PROCEDURE Set_Tight_TextFill (h : HANDLE;b : BOOLEAN);
BEGIN
	SetObjectVariableBoolean(h,684,b);
END;

FUNCTION Find_Layer (obj : HANDLE) : HANDLE;
BEGIN
	IF GetLayer(obj) = NIL THEN ResetObject(obj)
	ELSE Find_Layer := GetLayer(obj);
END;

{Sets Object Begin and End Markers to custom, 'Dot' OR 'Arrow'}
PROCEDURE Set_Markers_Cust (h : HANDLE;sBeg:STRING;sEnd:STRING);
VAR b	  : BOOLEAN;
	ActLS : REAL;
BEGIN
	ActLS := GetLScale(Find_Layer(h_Obj));
	IF sBeg = 'Dot' THEN {Dot}
		b := SetObjBeginningMarker(h,2,0,1/ActLS,1/ActLS,0,0,TRUE)
	ELSE IF sBeg = 'Arrow' THEN {Arrow}
		b := SetObjBeginningMarker(h,2176,15,3/ActLS,2/ActLS,0,0,TRUE);
	IF sEnd = 'Dot' THEN {Dot}
		b := SetObjEndMarker(h,2,0,1/ActLS,1/ActLS,0,0,TRUE)
	ELSE IF sEnd = 'Arrow' THEN {Arrow}
		b := SetObjEndMarker(h,2176,15,3/ActLS,2/ActLS,0,0,TRUE);
END;

{// Resets all 'RackEquip objects inside the RackObj's boundaries //}
PROCEDURE Refresh_Children (h : HANDLE;stype : STRING);
VAR
	pt1,pt2     : POINT;
	criteria,n  : STRING;
	c           : ARRAY [1..6] OF STRING;
BEGIN
	GetBBox(h,pt1.X,pt1.Y,pt2.X,pt2.Y);
	pt1.X := (pt1.X/12)-1;
	pt1.Y := (pt1.Y/12)+1;
	pt2.X := (pt2.X/12)+1;
	pt2.Y := (pt2.Y/12)-1;
	n := ' & ';
	c[1] := Concat('(T=PLUGINOBJECT)');
	c[2] := Concat('(R IN [','''',stype,'''','])');
	c[3] := Concat('(',pt2.Y,'<YCOORDINATE)');
	c[4] := Concat('(YCOORDINATE<',pt1.Y,')');
	c[5] := Concat('(',pt1.X,'<XCOORDINATE)');
	c[6] := Concat('(XCOORDINATE<',pt2.X,')');
	criteria := Concat(c[1],n,c[2],n,c[3],n,c[4],n,c[5],n,c[6]);
	ForEachObject(ResetObject,criteria);
END;


{====================================}
{------------- < MAIN > -------------}
{====================================}

{// Retrieve plug-in object information //}
BEGIN IF GetCustomObjectInfo(s_ObjName,h_Obj,h_ObjRecord,h_ObjWall) THEN BEGIN
	Set_Version_Info('0 . 3');
	Use_PIO_Text_Attributes(h_Obj);
	{===== Parameter Limits =====}
	IF (PNUMSPACES<0) THEN BEGIN
		SetRField(h_Obj,s_ObjName,'NumSpaces', '0');
		ResetObject(h_Obj);
	END;
	{===== Variable Setup =====}
	SetRField(h_Obj,s_ObjName,'__Parent',
			Concat(PTYPE,' ',PPREFIX,PIDNUM,' (',PMANUFACTURER,' ',PMODEL,')')
			);
	PushAttrs; { Attrs01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>}
	Fill_WtoB(0.035);
	Pen_WtoB(1);

	TextFace([]);
	r_TextScaler := 48/GetLScale(Find_Layer(h_Obj));


	{===== Setup Size =====}
	IF PSIZE = 'Regular' THEN BEGIN
		r_Height := RegularH;
	END ELSE IF PSIZE = 'Small' THEN BEGIN
		r_Height := SmallH;
	END ELSE IF PSIZE = 'Smaller' THEN BEGIN
		r_Height := SmallerH;
	END;
	IF PSPACESIZE = 'Regular' THEN BEGIN
		r_Space := RegularH;
	END ELSE IF PSPACESIZE = 'Small' THEN BEGIN
		r_Space := SmallH;
	END ELSE IF PSPACESIZE = 'Smaller' THEN BEGIN
		r_Space := SmallerH;
	END;

	Rect(-24,r_Height,24,0);

	TextSize(7*r_TextScaler);
	Fill_WtoB(0);

	IF PMANUFACTURER <> '' THEN BEGIN
		TextVerticalAlign(5);
		TextJust(1);
		TextOrigin(-24,r_Height);
		CreateText(PMANUFACTURER);
		HMoveBackward(LNewObj,TRUE);
	END;

	FillPat(0);
	TextVerticalAlign(1);
	TextJust(2);
	TextOrigin(0,r_Height);
	CreateText(PMODEL);

	IF PSIZE <> 'Smaller' THEN BEGIN
		TextFace([Italic]);
		TextSize(4*r_TextScaler);
		GetBBox(LNewObj,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_Tmp2.Y);
		TextOrigin(0,p_Tmp2.Y);
		CreateText(PLOCATION);
		IF PSIZE <> 'Small' THEN BEGIN
			TextFace([]);
			Pen_WtoB(0.5);
			TextSize(3*r_TextScaler);
			GetBBox(LNewObj,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_Tmp2.Y);
			TextOrigin(0,p_Tmp2.Y);
			IF PSHOWNOTE THEN CreateText(PNOTES);

			TextSize(2*r_TextScaler);
			TextOrigin(-23.75,0.25);
			TextJust(1);
			TextVerticalAlign(5);
			IF PIDNUM <> '0' THEN CreateText(Concat(PTYPE,' ',PPREFIX,PIDNUM))
			ELSE CreateText(PTYPE);
			TextOrigin(23.75,0.25);
			TextJust(3);
			CreateText(PIP);
		END;
	END;

	IF PNUMSPACES > 0 THEN BEGIN
		Fill_WtoB(0.15);
		Pen_WtoB(1);
		Rect(-24,0,24,(-r_Space*PNUMSPACES));
		HMoveBackward(LNewObj,TRUE);
		MoveTo(-24,-r_Space);
		PenSize(0);
		Relative;
		FOR i_Counter:=2 TO PNUMSPACES DO BEGIN
			LineTo(48,0);
			MoveTo(-48,-r_Space);
		END;
		Absolute;
	END;

	PopAttrs; { Attrs01 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<}
	Refresh_Children(h_Obj,'SBD In-Out (Salutz)');

END; END; Run(SBD_Device);

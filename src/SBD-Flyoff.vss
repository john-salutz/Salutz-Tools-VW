{//////////////////////////////////////////////////////////////////////////////
//  Developed by John Salutz, (c) 2020. Please share freely.
//
//  SBD Flyoff is a point based object for drawing flyoffs
//  in an audio signal flow diagram.
//////////////////////////////////////////////////////////////////////////////}

{//////////////////////////////////////////////////////////////////////////////
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//  <https://www.gnu.org/licenses/>
//////////////////////////////////////////////////////////////////////////////}

PROCEDURE SBD_Flyoff;

CONST
	RGBmax = 65535; {Max value for setting RGB colors in VS fuctions}
	kRegularH = 12in;
	kSmallH   = 9in;
	kMicroH   = 6in;

VAR
	{Standard variables}
	s_ObjName                                               : STRING;
	h_Obj,h_ObjRecord,h_ObjWall                             : HANDLE;
	b_Result                                                : BOOLEAN;
	i_Counter                                               : INTEGER;
	{Script specific variables}
	r_TextScaler,r_ObjHeight,r_ObjWidth                     : REAL;

{===== LOCAL FUNCTION DECLARATIONS =====}

{// See SalutzToolsFunctions.vss for additional fuctions //}
{$INCLUDE SalutzToolsFunctions.vss}

PROCEDURE Scale_to_Height (toScale : HANDLE; heightSize : REAL);
VAR p1 : POINT;
BEGIN
	HCenter(toScale,p1.X,p1.Y);
	HScale2D(
	        toScale, p1.X, p1.Y, heightSize/HHeight(toScale),
	        heightSize/HHeight(toScale), TRUE
	        );
END;

PROCEDURE Scale_to_Width (toScale, : HANDLE; widthSize : REAL);
VAR p1 : POINT;
BEGIN
	IF (HWidth(toScale) > widthSize) THEN BEGIN
		HCenter(toScale,p1.X,p1.Y);
		HScale2D(
		         toScale, p1.X, p1.Y, widthSize/HWidth(toScale),
		         widthSize/HWidth(toScale), TRUE
		         );
	END;
END;

{====================================}
{------------- < MAIN > -------------}
{====================================}

{// Retrieve plug-in object information //}
BEGIN IF GetCustomObjectInfo(s_ObjName,h_Obj,h_ObjRecord,h_ObjWall) THEN BEGIN
	Set_Version_Info('0 . 6');
	Use_PIO_Text_Attributes(h_Obj);
	{===== Parameter Limits =====}
	{===== Variable Setup =====}
	IF (PSIZE = 'Regular') OR (PSIZE = 'Small') THEN BEGIN
		r_ObjHeight := kSmallH;
		r_ObjWidth := 10.5in;
	END ELSE IF (PSIZE = 'Micro') THEN BEGIN
		r_ObjHeight := kMicroH;
		r_ObjWidth := 7in;
	END;

	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
	Fill_WtoB(0);
	Pen_WtoB(1);
	TextFace([]);
	r_TextScaler := 48/GetLScale(Find_Layer(h_Obj));

	IF PTYPE = 'Fly Off' THEN BEGIN
		SetParameterVisibility(h_Obj,'Manufacturer',FALSE);
		SetParameterVisibility(h_Obj,'Model',FALSE);
		SetParameterVisibility(h_Obj,'ClassPurp',FALSE);

		BeginPoly;
		Add2DVertex(r_ObjWidth/2,0,0,0);
		Add2DVertex(r_ObjWidth/4,r_ObjHeight/2,0,0);
		Add2DVertex(-r_ObjWidth/4,r_ObjHeight/2,0,0);
		Add2DVertex(-r_ObjWidth/2,0,0,0);
		Add2DVertex(-r_ObjWidth/4,-r_ObjHeight/2,0,0);
		Add2DVertex(r_ObjWidth/4,-r_ObjHeight/2,0,0);
		Add2DVertex(r_ObjWidth/2,0,0,0);
		EndPoly;

		{ID}
		TextSize(8*r_TextScaler);
		TextJust(2);
		TextVerticalAlign(3);
		TextOrigin(0,0);
		FillPat(0);
		CreateText(Concat(PPREFIX,PIDNUM));
		Scale_to_Height(LNewObj,r_ObjHeight);
		Scale_to_Width(LNewObj,0.7*r_ObjWidth);
	END;

	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}
END; END; Run(SBD_Flyoff);

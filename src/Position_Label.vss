{//////////////////////////////////////////////////////////////////////////////
//  Developed by John Salutz, 2020. Please share freely.
//
//  This draws a Salutz Position Label poly and adds text fields.
//////////////////////////////////////////////////////////////////////////////}

{//////////////////////////////////////////////////////////////////////////////
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//  <https://www.gnu.org/licenses/>
//////////////////////////////////////////////////////////////////////////////}

PROCEDURE Position_Label;

CONST
	RGBmax = 65535;

VAR
	{Standard variables}
	h_Obj,h_ObjRecord,h_ObjWall                             : HANDLE;
	s_ObjName                                               : STRING;
	b_Result                                                : BOOLEAN;
	{Script specific variables}
	h_PosiName,h_Shape,h_Circle                             : HANDLE;
	p_OffsetPosiName,p_OffsetLine1,p_LineOrig,p_Tmp1,p_Tmp2 : POINT;
	p_RePosition                                            : POINT;
	r_Scale,r_TextScaler,r_TextHeight                       : REAL;
	i_Flip                                                  : INTEGER;

{===== LOCAL FUNCTION DECLARATIONS =====}

{// See SalutzToolsFunctions.vss for additional fuctions //}
{$INCLUDE SalutzToolsFunctions.vss}

FUNCTION Get_Zcoor(h : HANDLE) : STRING;
VAR
	x,y,z : REAL;
BEGIN
	GetSymLoc3D(h_Obj,x,y,z);
	Get_Zcoor := Num2StrF(z);
END;

{Sets Object Begin and End Markers to custom, 'Dot' OR 'Arrow'}
PROCEDURE Set_Markers_Cust (h : HANDLE;sBeg:STRING;sEnd:STRING);
VAR b     : BOOLEAN;
	ActLS : REAL;
BEGIN
	ActLS := GetLScale(Find_Layer(h_Obj));
	IF sBeg = 'Dot' THEN {Dot}
		b := SetObjBeginningMarker(h,2,0,1in/ActLS,1in/ActLS,2,7,TRUE)
	ELSE IF sBeg = 'Arrow' THEN {Arrow}
		b := SetObjBeginningMarker(h,2176,15,3in/ActLS,2in/ActLS,2,7,TRUE);
	IF sEnd = 'Dot' THEN {Dot}
		b := SetObjEndMarker(h,2,0,1in/ActLS,1in/ActLS,2,7,TRUE)
	ELSE IF sEnd = 'Arrow' THEN {Arrow}
		b := SetObjEndMarker(h,2176,15,3in/ActLS,2in/ActLS,2,7,TRUE);
END;

PROCEDURE From_Back_Set_Pen (source : HANDLE; target : HANDLE);
VAR r,g,b : LONGINT;
BEGIN
	GetFillBack(source,r,g,b);
	SetPenFore(target,r,g,b);
END;

PROCEDURE Draw_Squiggle (p1X,p1Y,p2X,p2Y : REAL);
VAR
	m1,v1,v2 : VECTOR;
BEGIN
	m1.X := ((p2X-p1X)/2)+p1X;
	m1.Y := ((p2Y-p1Y)/2)+p1Y;
	v1.X := p2X-p1X;
	v1.Y := p2Y-p1Y;
	v2 := Perp(v1);
	v2 := UnitVec(v2);
	BeginPoly;
	Add2DVertex(p1X,p1Y,0,0);
	Add2DVertex(m1.X-v2.X,m1.Y-v2.Y,2,0);
	Add2DVertex(m1.X+v2.X,m1.Y+v2.Y,2,0);
	Add2DVertex(p2X,p2Y,0,0);
	EndPoly;
END;

PROCEDURE Scale_Fit_Width (toScale,fitTo : HANDLE; scaleFactor : REAL);
VAR p1 : POINT;
BEGIN
	HCenter(toScale,p1.X,p1.Y);
	HScale2D(
	        toScale, p1.X, p1.Y, HWidth(fitTo)*scaleFactor/HWidth(toScale),
	        HWidth(fitTo)*scaleFactor/HWidth(toScale), TRUE
	        );
END;

PROCEDURE Draw_Poly_Small_Arrow;
BEGIN
	BeginPoly;
	Add2DVertex(-3in*i_Flip,-5.196in,0,0);
	Add2DVertex(-3in*i_Flip,-6in,0,0);
	Add2DVertex(-9in*i_Flip,0,0,0);
	Add2DVertex(-3in*i_Flip,6in,0,0);
	Add2DVertex(-3in*i_Flip,5.196in,0,0);
	Add2DVertex(6in*i_Flip,0,4,6in);
	Add2DVertex(-3in*i_Flip,-5.196in,0,0);
	EndPoly;
END;

PROCEDURE Draw_Poly_Micro_Arrow;
BEGIN
	BeginPoly;
	Add2DVertex(0,-3.75in,0,0);
	Add2DVertex(0,-5.5in,0,0);
	Add2DVertex(-6in*i_Flip,0,0,0);
	Add2DVertex(0,5.5in,0,0);
	Add2DVertex(0,3.75in,0,0);
	Add2DVertex(3.75in*i_Flip,0,4,3.75in);
	Add2DVertex(0,-3.75in,0,0);
	EndPoly;
END;

PROCEDURE Draw_Poly_Regular_Line;
BEGIN
	BeginPoly;
	Add2DVertex(0,-4.5in,0,0);
	Add2DVertex((HWidth(h_PosiName)+2in)/2,-4.5in,0,0);
	Add2DVertex((HWidth(h_PosiName)+1in)/2,-5.25in,0,0);
	Add2DVertex(0,-6in,0,0);
	Add2DVertex((-HWidth(h_PosiName)-1in)/2,-5.25in,0,0);
	Add2DVertex((-HWidth(h_PosiName)-2in)/2,-4.5in,0,0);
	Add2DVertex(0,-4.5in,0,0);
	EndPoly;
END;

PROCEDURE Draw_Poly_Regular_Arrow;
BEGIN
	BeginPoly;
	Add2DVertex(0,-4.5in,0,0);
	Add2DVertex((HWidth(h_PosiName)+2in)*i_Flip,-4.5in,0,0);
	Add2DVertex((HWidth(h_PosiName)+1in)*i_Flip,-5.25in,0,0);
	Add2DVertex(0,-5.25in,0,0);
	Add2DVertex(0,-6in,0,0);
	Add2DVertex(-6in*i_Flip,0,0,0);
	Add2DVertex(0,6in,0,0);
	Add2DVertex(0,4.5in,0,0);
	Add2DVertex(-2.5in*i_Flip,0,4,5.3in);
	Add2DVertex(0,-4.5in,0,0);
	EndPoly;
END;

PROCEDURE Draw_Poly_RegularArrowBack;
BEGIN
	BeginPoly;
	Add2DVertex(0,-4.5in,0,0);
	Add2DVertex(-2.5in*i_Flip,0,4,5.3in);
	Add2DVertex(0,4.5in,0,0);
	Add2DVertex((HWidth(h_PosiName)+2in)*i_Flip,4.5in,0,0);
	Add2DVertex((HWidth(h_PosiName)+2in)*i_Flip,-4.5in,0,0);
	Add2DVertex(0,-4.5in,0,0);
	EndPoly;
END;

PROCEDURE Draw_Text_Regular_Notes (sNote : STRING);
BEGIN
	TextOrigin(p_OffsetLine1.X,p_OffsetLine1.Y);
	CreateText(sNote);
	Set_Tight_TextFill(LNewObj,TRUE);
	IF (PWRAPTEXT) THEN BEGIN
		SetTextWidth(LNewObj,PWRAPWIDTH/PSCALE);
		SetTextLeading(LNewObj,GetTextSize(LNewObj,0)*0.9);
	END;
	p_OffsetLine1.Y := p_OffsetLine1.Y - HHeight(LNewObj);
END;

PROCEDURE Draw_Poly_Bubble;
BEGIN
	BeginPoly;
	IF (PLABELDIRECTION = '<<') THEN BEGIN {Left Side Arrow}
		Add2DVertex(p_Tmp1.X,p_Tmp2.Y-0.5in,0,0);
		Add2DVertex(p_Tmp1.X,p_Tmp2.Y-2in, 0,0);
		Add2DVertex(p_Tmp1.X-(r_TextHeight*0.75),
		            (p_Tmp1.Y+p_Tmp2.Y)/2, 0,0);
		Add2DVertex(p_Tmp1.X,p_Tmp1.Y+2in, 0,0);
		Add2DVertex(p_Tmp1.X,p_Tmp1.Y+0.5in,0,0);
	END ELSE BEGIN {Left Side Round}
		Add2DVertex(p_Tmp1.X+1in,p_Tmp2.Y-0.5in,0,0);
		Add2DVertex(p_Tmp1.X-(r_TextHeight/2.5),
		            (p_Tmp1.Y+p_Tmp2.Y)/2,4,r_TextHeight/2.5);
		Add2DVertex(p_Tmp1.X+1in,p_Tmp1.Y+0.5in,0,0);
	END;
	IF (PLABELDIRECTION = '>>') THEN BEGIN {Right Side Arrow}
		Add2DVertex(p_Tmp2.X,p_Tmp1.Y+0.5in,0,0);
		Add2DVertex(p_Tmp2.X,p_Tmp1.Y+2in,0,0);
		Add2DVertex(p_Tmp2.X+(r_TextHeight*0.75),
		            (p_Tmp1.Y+p_Tmp2.Y),0,0);
		Add2DVertex(p_Tmp2.X,p_Tmp2.Y-2in,0,0);
		Add2DVertex(p_Tmp2.X,p_Tmp2.Y-0.5in,0,0);
	END ELSE BEGIN {Right Side Round}
		Add2DVertex(p_Tmp2.X-1in,p_Tmp1.Y+0.5in,0,0);
		Add2DVertex(p_Tmp2.X+(r_TextHeight/2.5),
		            (p_Tmp1.Y+p_Tmp2.Y),4,r_TextHeight/2.5);
		Add2DVertex(p_Tmp2.X-1in,p_Tmp2.Y-0.5in,0,0);
	END;
	EndPoly;
END;

PROCEDURE Draw_Poly_Bubble_Circle;
BEGIN
	BeginPoly;
	Add2DVertex(p_Tmp1.X,p_Tmp2.Y-0.5in,0,0);
	Add2DVertex(p_Tmp1.X-(r_TextHeight/2.5)-1in,
	            (p_Tmp1.Y+p_Tmp2.Y)/2,4,r_TextHeight/2.5);
	Add2DVertex(p_Tmp1.X,p_Tmp1.Y+0.5in,0,0);
	Add2DVertex(p_Tmp2.X,p_Tmp1.Y+0.5in,0,0);
	Add2DVertex(p_Tmp2.X+(r_TextHeight/2.5)+1in,
	            (p_Tmp1.Y+p_Tmp2.Y),4,r_TextHeight/2.5);
	Add2DVertex(p_Tmp2.X,p_Tmp2.Y-0.5in,0,0);
	Add2DVertex(p_Tmp1.X,p_Tmp2.Y-0.5in,0,0);
	EndPoly;
END;

{====================================}
{------------- < MAIN > -------------}
{====================================}
BEGIN IF GetCustomObjectInfo(s_ObjName,h_Obj,h_ObjRecord,h_ObjWall) THEN BEGIN
	Set_Version_Info('0 . 6 . 8');
	Use_PIO_Text_Attributes(h_Obj);

	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}

	SetParameterVisibility(h_Obj,'ControlPoint01X',FALSE);
	SetParameterVisibility(h_Obj,'ControlPoint01Y',FALSE);
	SetParameterVisibility(h_Obj,'WrapWidth',PWRAPTEXT);
	IF ((PLABELSTYLE='Bubble') OR (PSHOWINNERCIRCLE = FALSE))
		THEN SetParameterVisibility(h_Obj,'NameColor',TRUE)
	ELSE SetParameterVisibility(h_Obj,'NameColor',FALSE);
	IF (PLABELSTYLE = 'Regular')
		THEN SetParameterVisibility(h_Obj,'ShowInnerCircle',FALSE)
	ELSE SetParameterVisibility(h_Obj,'ShowInnerCircle',TRUE);

	{===== Parameter Limits =====}
	IF (PSCALE<=0) THEN BEGIN
		SetRField(h_Obj,s_ObjName,'Scale','1');
		AlrtDialog('Scale Out of Bounds, Scale may not be zero or negative.');
		ResetObject(h_Obj);
	END;
	IF (PLABELSTYLE='Billington') THEN BEGIN
		SetRField(h_Obj,s_ObjName,'LabelStyle','Bubble');
		ResetObject(h_Obj);
		ResetObject(h_Obj);
	END;
	IF PLABELSTYLE = 'Smaller' THEN BEGIN
		SetRField(h_Obj,s_ObjName,'LabelStyle','Micro');
		ResetObject(h_Obj);
		ResetObject(h_Obj);
	END;

	{===== Variable Setup =====}
	r_TextScaler := 48/GetLScale(Find_Layer(h_Obj));
	p_RePosition.X := 0;
	p_RePosition.Y := 0;

	{===== Draw Shapes & Set Text Orig Points =====}
	BeginGroup;
	IF ((PLABELSTYLE = 'Small') OR (PLABELSTYLE = 'Micro')) THEN BEGIN
		SetParameterVisibility(h_Obj,'WrapText',FALSE);
		SetParameterVisibility(h_Obj,'WrapWidth',FALSE);
		TextJust(2);
		TextVerticalAlign(3);
		PenPatN(2);
		PenSize(5);

		{===== "Small" size =====}
		IF (PLABELSTYLE = 'Small') THEN BEGIN
			IF (PLABELDIRECTION<>'---') THEN BEGIN
				IF (PLABELDIRECTION='<<') THEN i_Flip := 1
				ELSE i_Flip := -1;
				p_LineOrig.X := -9in*i_Flip;
				p_LineOrig.Y := 0;
				Draw_Poly_Small_Arrow; {// Create Poly Shape Small //}
			END ELSE BEGIN {PLABELDIRECTION = '---'}
				p_LineOrig.X := 0;
				p_LineOrig.Y := 0;
				Oval(-6in,6in,6in,-6in);
			END;
			h_Shape := LNewObj;

			{// Create Circle Small //}
			Fill_WtoB(0);
			Oval(-5.5in,5.5in,5.5in,-5.5in);
			h_Circle := LNewObj;
			HMoveForward(LNewObj,TRUE);
			From_Back_Set_Pen(h_Obj,LNewObj);
			IF NOT PSHOWINNERCIRCLE THEN SetOpacity(LNewObj,0);
		END {Small} ELSE

		BEGIN {===== "Micro" size =====}
			IF (PLABELDIRECTION<>'---') THEN BEGIN
				IF (PLABELDIRECTION='<<') THEN i_Flip := 1
				ELSE i_Flip := -1;
				p_LineOrig.X := -6in*i_Flip;
				p_LineOrig.Y := 0;
				Draw_Poly_Micro_Arrow; {// Create Poly Shape Micro //}
			END ELSE BEGIN {PLABELDIRECTION = '---'}
				p_LineOrig.X := 0;
				p_LineOrig.Y := 0;
				Oval(-3.75in,3.75in,3.75in,-3.75in);
			END;
			h_Shape := LNewObj;

			{// Create Circle Micro //}
			Fill_WtoB(0);
			Oval(-3.5in,3.5in,3.5in,-3.5in);
			h_Circle := LNewObj;
			HMoveForward(LNewObj,TRUE);
			From_Back_Set_Pen(h_Obj,LNewObj);
			IF NOT PSHOWINNERCIRCLE THEN SetOpacity(LNewObj,0);
		END; {Micro}

		{// Create Position Name Label Small/Micro //}
		TextOrigin(0,0);
		IF PSHOWINNERCIRCLE THEN Pen_WtoB(1)
		ELSE IF (PNAMECOLOR = 'Black') THEN Pen_WtoB(1)
		ELSE IF (PNAMECOLOR = 'White') THEN Pen_WtoB(0);
		FillPat(0);
		TextFace([Bold]);
		IF (PLABELSTYLE = 'Small') THEN TextSize(10*r_TextScaler)
		ELSE TextSize(7*r_TextScaler);
		TextVerticalAlign(3);
		CreateText(PPOSINAME);
		h_PosiName := LNewObj;
		IF HWidth(h_PosiName)>HWidth(h_Circle)
			THEN Scale_Fit_Width(h_PosiName,h_Circle,0.9);

		{// Create Trim Text Small/Micro //}
		IF PSHOWTRIM THEN BEGIN
			GetBBox(h_Shape,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_Tmp2.Y);
			TextVerticalAlign(1);
			Fill_WtoB(0);
			Pen_WtoB(1);
			TextFace([]);
			IF (PLABELSTYLE = 'Small') THEN TextSize(5*r_TextScaler)
			ELSE TextSize(4*r_TextScaler);
			TextOrigin(0,p_Tmp2.Y);
			CreateText(Concat('TRIM@ ',Get_Zcoor(h_Obj)));
			HMoveBackward(LNewObj,TRUE);
		END;
	END {"Small" & "Micro"} ELSE

	BEGIN {===== "Regular" size =====}
		TextFace([Bold]);
		TextSize(10*r_TextScaler);
		TextVerticalAlign(3);
		PenPatN(2);
		PenSize(5);

		IF (PLABELDIRECTION='---') OR (PLABELSTYLE='Bubble') THEN
		BEGIN {// Direction "---" & Style "Bubble" //}
			TextSize(10*r_TextScaler);
			TextJust(2);
			PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
			IF (PLABELSTYLE = 'Bubble') THEN BEGIN
				FillPat(0);
				IF (PNAMECOLOR = 'Black') THEN Pen_WtoB(1)
				ELSE IF (PNAMECOLOR = 'White') THEN Pen_WtoB(0);
				TextOrigin(0,0);
				TextVerticalAlign(3);
			END ELSE BEGIN
				Fill_WtoB(0);
				Pen_WtoB(1);
				TextOrigin(0,-4.5in);
				TextVerticalAlign(5);
			END;
			CreateText(PPOSINAME);
			h_PosiName := LNewObj;
			Set_Tight_TextFill(h_PosiName,TRUE);
			PopAttrs; {))))))))))))))))))))))))))))))))))))))))}
			i_Flip := 1;
			p_OffsetLine1.X := 0;
			p_OffsetLine1.Y := -5.75in;
			p_LineOrig.X := 0;
			p_LineOrig.Y := -4.5in;
			IF (PWRAPTEXT) THEN BEGIN
				SetTextWidth(h_PosiName,PWRAPWIDTH/PSCALE);
				SetTextLeading(h_PosiName,GetTextSize(h_PosiName,0)*0.9);
			END;

			{// Create Poly Shape //}
			PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
			IF (PLABELSTYLE <>'Bubble') THEN BEGIN
				Draw_Poly_Regular_Line;
				h_Shape := LNewObj;
			END ELSE BEGIN {// Bubble Style //}
				GetBBox(h_PosiName,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_Tmp2.Y);
				p_LineOrig.Y := (p_Tmp1.Y+p_Tmp2.Y);
				p_OffsetLine1.Y := (p_Tmp2.Y-1in);
				r_TextHeight := HHeight(h_PosiName);
				Draw_Poly_Bubble;
				h_Shape := LNewObj;
				SetPolyClosed(h_Shape,TRUE);

				IF (PSHOWINNERCIRCLE) THEN BEGIN
					Fill_WtoB(0);
					p_Tmp1.X := (p_Tmp1.X+1in);
					p_Tmp2.X := (p_Tmp2.X-1in);
					Draw_Poly_Bubble_Circle;
					h_Circle := LNewObj;
				END;
			END;
			PopAttrs; {))))))))))))))))))))))))))))))))))))))))}

			IF PLABELDIRECTION = '---' THEN BEGIN
				IF (PCONTROLPOINT01X>(HWidth(h_Shape)/2)) THEN
					p_LineOrig.X := HWidth(h_Shape)/2
				ELSE IF (PCONTROLPOINT01X<(-HWidth(h_Shape)/2)) THEN
					p_LineOrig.X := -HWidth(h_Shape)/2;
				END ELSE BEGIN {// Bubble "<<" & ">>" //}
					p_LineOrig.X := 0;
					GetBBox(h_Shape,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_Tmp2.Y);
					IF PLABELDIRECTION = '<<' THEN BEGIN
						p_RePosition.X := p_Tmp1.X;
						p_OffsetLine1.X := (-HWidth(h_PosiName)/2)+0.5in;
						SetTextJustN(h_PosiName,1);
						TextJust(1);
					END ELSE IF PLABELDIRECTION = '>>' THEN BEGIN
						p_RePosition.X := p_Tmp2.X;
						p_OffsetLine1.X := (HWidth(h_PosiName)/2)-0.5in;
						SetTextJustN(h_PosiName,3);
						TextJust(3);
					END;
				END;
		END {Direction ---}

		ELSE IF (PLABELDIRECTION<>'---') THEN
		BEGIN {// Direction "<<" & ">>" //}
			IF (PLABELDIRECTION='<<') THEN BEGIN
				TextJust(1);
				i_Flip := 1;
			END ELSE BEGIN
				TextJust(3);
				i_Flip := -1;
			END;
			TextOrigin(i_Flip,0);
			PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
			Fill_WtoB(0);
			Pen_WtoB(1);
			CreateText(PPOSINAME);
			h_PosiName := LNewObj;
			SetTextVertAlignN(h_PosiName,5);
			PopAttrs; {))))))))))))))))))))))))))))))))))))))))}
			IF (PWRAPTEXT) THEN BEGIN
				SetTextWidth(h_PosiName,PWRAPWIDTH/PSCALE);
				SetTextLeading(h_PosiName,GetTextSize(h_PosiName,0)*0.9);
			END;

			{// Create Poly Shape //}
			Draw_Poly_Regular_Arrow;
			h_Shape := LNewObj;

			{// Create Background Poly Shape //}
			PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
			Fill_WtoB(0);
			PenSize(0);
			PenPatN(0);
			Draw_Poly_RegularArrowBack;
			HMoveBackward(LNewObj,TRUE);
			PopAttrs; {))))))))))))))))))))))))))))))))))))))))}

			p_OffsetLine1.X := 0.5in*i_Flip;
			p_OffsetLine1.Y := -5.75in;
			p_LineOrig.X := 0;
			p_LineOrig.Y := 0;
			p_RePosition.X := -6in*i_Flip;
		END; {Direction "<<" & ">>"}

		{// Setup Line 1&2 Attributes //}
		TextVerticalAlign(1);
		TextSize(6*r_TextScaler);
		TextFace([]);
		Pen_WtoB(1);
		Fill_WtoB(0);

		{// Create Trim Text //}
		IF PSHOWTRIM
			THEN Draw_Text_Regular_Notes(Concat('TRIM@ ',Get_Zcoor(h_Obj)));
		{// Create Line 1 Text //}
		IF PLINE1<>'' THEN Draw_Text_Regular_Notes(PLINE1);
		{// Create Line 2 Text //}
		IF PLINE2<>'' THEN Draw_Text_Regular_Notes(PLINE2);

		IF (PLABELSTYLE = 'Bubble') THEN BEGIN
			HMoveBackward(h_Circle,TRUE);
			HMoveBackward(h_Shape,TRUE)
		END ELSE HMoveForward(h_Shape,TRUE);
	END;{"Regular" size}


	EndGroup;
	HMove(LNewObj,-p_RePosition.X,0);
	HScale2D(LNewObj,0,0,PSCALE,PSCALE,TRUE);

	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}

	{===== Draw Leader Line =====}
	SetCntrlPtVis(h_Obj,1,PUSEPOINT);
	IF PUSEPOINT THEN BEGIN
		Draw_Squiggle(
					  (p_LineOrig.X)*PSCALE, p_LineOrig.Y*PSCALE,
		              PCONTROLPOINT01X, PCONTROLPOINT01Y
		              );
		HMoveBackward(LNewObj,TRUE);
		Set_Markers_Cust(LNewObj,'NA','Arrow');
		SetFPat(LNewObj,0);
	END;

	{// Hide/Show in 3D Views //}
	IF PSHOW3D=FALSE THEN Locus3D(0,0,0);

END; {IFGetCustomObjectInfo} END; {MAIN}
Run(Position_Label);

{//////////////////////////////////////////////////////////////////////////////
// Developed by John Salutz, (c) 2020. Please share freely.
//
// Creates a compass style marker to show boom hanging directions.
//////////////////////////////////////////////////////////////////////////////}

{//////////////////////////////////////////////////////////////////////////////
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 2.1 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
//  <https://www.gnu.org/licenses/>
//////////////////////////////////////////////////////////////////////////////}

PROCEDURE BoomMarker;

CONST
	RGBmax = 65535; {Max value for setting RGB colors in VS fuctions}

VAR
	{Standard variables}
	s_ObjName                                               : STRING;
	h_Obj,h_ObjRecord,h_ObjWall                             : HANDLE;
	b_Result                                                : BOOLEAN;
	i_Counter                                               : INTEGER;
	{Script specific variables}
	h_Label,h_Container                                     : HANDLE;
	r_TextScaler                                            : REAL;
	p_Tmp1,p_Tmp2,p_NoteStart                               : POINT;

{===== LOCAL FUNCTION DECLARATIONS =====}

{// See SalutzToolsFunctions.vss for additional fuctions //}
{$INCLUDE SalutzToolsFunctions.vss}

PROCEDURE Set_Text_HardBold (h : HANDLE);
BEGIN
	SetTextStyle(h,0,GetTextLength(h),0);
	SetTextStyle(h,0,GetTextLength(h),1);
END;

{Sets Object Begin and End Markers to custom, 'Dot' OR 'Arrow'}
PROCEDURE Set_Markers_Cust (h : HANDLE;sBeg:STRING;sEnd:STRING);
VAR b     : BOOLEAN;
	ActLS : REAL;
BEGIN
	ActLS := GetLScale(Find_Layer(h_Obj));
	IF sBeg = 'Dot' THEN {Dot}
		b := SetObjBeginningMarker(h,2,0,1/ActLS,1/ActLS,0,0,TRUE)
	ELSE IF sBeg = 'Arrow' THEN {Arrow}
		b := SetObjBeginningMarker(h,2176-128,15,3/ActLS,2/ActLS,0,0,TRUE);
	IF sEnd = 'Dot' THEN {Dot}
		b := SetObjEndMarker(h,2,0,1/ActLS,1/ActLS,0,0,TRUE)
	ELSE IF sEnd = 'Arrow' THEN {Arrow}
		b := SetObjEndMarker(h,2176-128,15,3/ActLS,2/ActLS,0,0,TRUE);
END;

{====================================}
{------------- < MAIN > -------------}
{====================================}

{// Retrieve plug-in object information //}
BEGIN IF GetCustomObjectInfo(s_ObjName,h_Obj,h_ObjRecord,h_ObjWall) THEN BEGIN
	Set_Version_Info('0 . 6 . 7');
	Use_PIO_Text_Attributes(h_Obj);

	{===== Parameter Limits =====}
	{===== Variable Setup =====}
	r_TextScaler := 24/GetLScale(Find_Layer(h_Obj));
	p_NoteStart.X := 0;
	p_NoteStart.Y := -1.5in;
	{===== Attribute Setup =====}
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
	
	{ FillPat(1); }
	{ FillBack(RGBmax,RGBmax,RGBmax); }
	PenSize(7*r_TextScaler);

	{// Label Text //}
	IF PLABEL <> '' THEN BEGIN
		TextOrigin(0,2in);
		TextJust(2);
		TextVerticalAlign(5);
		CreateText(PLABEL);
		h_Label := LNewObj;
		Set_Text_HardBold(h_Label);
		IF PLABELPEN = 'Black' THEN Set_Pen_WtoB(h_Label,1)
		ELSE IF PLABELPEN = 'White' THEN Set_Pen_WtoB(h_Label,0);
		{// Draw Container //}
		PenPatN(2);
		IF PCONTAINER<>'None' THEN BEGIN
			GetBBox(h_Label,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_Tmp2.Y);
		END ELSE Set_Background_WtoB(h_Label,0);

		{ IF PUNDERLINE THEN BEGIN }
		IF PCONTAINER='Underline' THEN BEGIN
			Set_Background_WtoB(h_Label,0);
			MoveTo(p_Tmp1.X*1.1,p_Tmp2.Y);
			LineTo(p_Tmp2.X*1.1,p_Tmp2.Y);
			h_Container := LNewObj;
		END ELSE IF PCONTAINER='Rectangle' THEN BEGIN
			SetFPat(h_Label,0);
			Rect(p_Tmp1.X*1.1,p_Tmp1.Y,p_Tmp2.X*1.1,p_Tmp2.Y);
			h_Container := LNewObj;
			HMoveBackward(h_Container,TRUE);
		END ELSE IF PCONTAINER='Bubble' THEN BEGIN
			SetFPat(h_Label,0);
			BeginPoly;
			Add2DVertex(p_Tmp1.X*1,p_Tmp2.Y,0,0);
			Add2DVertex((p_Tmp1.X*1)-(HHeight(h_Label)/2),
						(p_Tmp1.Y+p_Tmp2.Y)/2,4,HHeight(h_Label)/2.5);
			Add2DVertex(p_Tmp1.X*1,p_Tmp1.Y,0,0);
			Add2DVertex(p_Tmp2.X*1,p_Tmp1.Y,0,0);
			Add2DVertex((p_Tmp2.X*1)+(HHeight(h_Label)/2),
						(p_Tmp1.Y+p_Tmp2.Y)/2,4,HHeight(h_Label)/2.5);
			Add2DVertex(p_Tmp2.X*1,p_Tmp2.Y,0,0);
			Add2DVertex(p_Tmp1.X*1,p_Tmp2.Y,0,0);
			EndPoly;
			h_Container := LNewObj;
			HMoveBackward(h_Container,TRUE);
		END;
	END;

	PenSize(5*r_TextScaler);

	{// Draw Horz Lines //}
	MoveTo(0,0);
	LineTo(6in,0);
	Set_Markers_Cust(LNewObj,'NA','Arrow');
	MoveTo(0,0);
	LineTo(-6in,0);
	Set_Markers_Cust(LNewObj,'NA','Arrow');

	{// Draw Center Marker //}
	Oval(-1in,1in,1in,-1in);
	Set_Background_WtoB(LNewObj,0.2);
	ArcByCenter(0,0,1in,0,90);
	Set_Background_WtoB(LNewObj,1);
	ArcByCenter(0,0,1in,180,90);
	Set_Background_WtoB(LNewObj,1);

	{// Text Style 'Plain' //}
	TextFace([]);
	TextSize(9*r_TextScaler);
	Fill_WtoB(0);
	{ Pen_WtoB(1); }

	{// East Text //}
	TextOrigin(6.5in,0);
	TextVerticalAlign(3);
	TextJust(1);
	IF PEAST <> '' THEN BEGIN
		CreateText(PEAST);
		Set_Pen_WtoB(LNewObj,1);
	END;

	{// West Text //}
	TextOrigin(-6.5in,0);
	TextJust(3);
	IF PWEST <> '' THEN BEGIN
		CreateText(PWEST);
		Set_Pen_WtoB(LNewObj,1);
	END;

	{// South Text //}
	TextOrigin(0,-4in);
	TextVerticalAlign(1);
	TextJust(2);
	IF PSOUTH <> '' THEN BEGIN
		{Draw Vert Line}
		MoveTo(0,0);
		LineTo(0,-4in);
		Set_Markers_Cust(LNewObj,'NA','Arrow');
		HMoveBackward(LNewObj,TRUE);
		{Draw Text}
		CreateText(PSOUTH);
		HMoveBackward(LNewObj,TRUE);
		Set_Pen_WtoB(LNewObj,1);
		GetBBox(LNewObj,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_NoteStart.Y);
	END ELSE p_Tmp2.Y := -4in;

	{===== Start Dimension/Notes Text =====}
	TextOrigin(p_NoteStart.X,p_NoteStart.Y);
	TextVerticalAlign(1);
	TextJust(2);
	Pen_WtoB(1);
	{ PenFore(0,0,0); }
	{ PenBack(0,0,0); }
	PenSize(2*r_TextScaler);

	{// Dimension Text //}
	IF PDIMFROM <> '' THEN BEGIN
		TextSize(7*r_TextScaler);
		TextFace([Italic]);
		CreateText('DIMENSION FROM:');
		HMoveBackward(LNewObj,TRUE);
		GetBBox(LNewObj,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_Tmp2.Y);
		{ MoveTo(p_Tmp1.X,p_Tmp2.Y); }
		{ LineTo(p_Tmp2.X,p_Tmp2.Y); }
		{ MoveTo(-12in,p_Tmp2.Y); }
		{ LineTo(12in,p_Tmp2.Y); }
		TextOrigin(0,p_Tmp2.Y);
		TextSize(8*r_TextScaler);
		TextFace([]);
		CreateText(PDIMFROM);
		Set_Tight_TextFill(LNewObj,TRUE);
		SetTextWidth(LNewObj,33in);
		HMoveBackward(LNewObj,TRUE);
	END;

	{// Start Notes Text //}
	GetBBox(LNewObj,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_Tmp2.Y);
	TextOrigin(0,p_Tmp2.Y);
	TextVerticalAlign(1);
	TextJust(2);

	IF PNOTES <> '' THEN BEGIN
		
		{ TextSize(7*r_TextScaler); }
		{ TextFace([Italic]); }
		{ CreateText('NOTE:'); }
		{ HMoveBackward(LNewObj,TRUE); }
		{ GetBBox(LNewObj,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_Tmp2.Y); }
		{ MoveTo(p_Tmp1.X,p_Tmp2.Y); }
		{ LineTo(p_Tmp2.X,p_Tmp2.Y); }
		{ TextOrigin(0,p_Tmp2.Y); }
		{ TextSize(8*r_TextScaler); }
		{ TextFace([]); }
		{ CreateText(PNOTES); }
		TextSize(8*r_TextScaler);
		TextFace([]);
		CreateText(Concat('NOTE: ',PNOTES));
		SetTextStyle(LNewObj,0,5,1);
		SetTextStyle(LNewObj,0,5,2);
		SetTextSize(LNewObj,0,5,6*r_TextScaler);
		Set_Tight_TextFill(LNewObj,TRUE);
		SetTextWidth(LNewObj,33in);
		HMoveBackward(LNewObj,TRUE);
		GetBBox(LNewObj,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_Tmp2.Y);
		MoveTo(-12in,p_Tmp1.Y);
		LineTo(12in,p_Tmp1.Y);
		{ MoveTo(p_Tmp1.X,p_Tmp1.Y); }
		{ LineTo(p_Tmp2.X,p_Tmp1.Y); }
	END;

	{===== End Sequence =====}
	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}
END; END; Run(BoomMarker);

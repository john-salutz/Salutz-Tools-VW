{//////////////////////////////////////////////////////////////////////////////
//  Developed by John Salutz, 2020. Please share freely.
//
//  This script creates a dynamic rack for mounted equipment.
//////////////////////////////////////////////////////////////////////////////}

{//////////////////////////////////////////////////////////////////////////////
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU General Public License for more details.
//  <https://www.gnu.org/licenses/>
//////////////////////////////////////////////////////////////////////////////}

PROCEDURE Rack_Obj;

CONST {Rack size constants}
	k_RackU = 1.75in; {1 rack unit height (1.75")}
	k_RackWidth = 19in; {19" rack width}
	k_EarWidth = 5/8in; {Rack ear width (5/8")}
	RGBmax = 65535; {Max value for setting RGB colors in VS fuctions}

VAR
	{Standard variables}
	s_ObjName                                             : STRING;
	h_Obj,h_ObjRecord,h_ObjWall                           : HANDLE;
	b_Result                                              : BOOLEAN;
	i_Counter                                             : INTEGER;
	{Script specific variables}
	h_OuterRect,h_InnerRect,h_RackID                      : HANDLE;
	r_Height,r_Width                                      : REAL;
	p_Tmp1,p_Tmp2                                         : POINT;

{===== LOCAL FUNCTION DECLARATIONS =====}

{// See SalutzToolsFunctions.vss for additional fuctions //}
{$INCLUDE SalutzToolsFunctions.vss}

{// Scales 'toScale' to fit to a percentage (scaleFactor) of 'fitTo' height //}
PROCEDURE Scale_Fit_Height (toScale,fitTo : HANDLE; scaleFactor : REAL);
VAR p1 : POINT;
BEGIN
	HCenter(toScale,p1.X,p1.Y);
	HScale2D(
	         toScale, p1.X, p1.Y, (HHeight(fitTo)*scaleFactor)/HHeight(toScale),
	         (HHeight(fitTo)*scaleFactor)/HHeight(toScale), TRUE
	         );
END;

{// Scales 'toScale' to fit to a percentage (scaleFactor) of 'fitTo' width //}
PROCEDURE Scale_Fit_Width (toScale,fitTo : HANDLE; scaleFactor : REAL);
VAR p1 : POINT;
BEGIN
	HCenter(toScale,p1.X,p1.Y);
	HScale2D(
	         toScale, p1.X, p1.Y, HWidth(fitTo)*scaleFactor/HWidth(toScale),
	         HWidth(fitTo)*scaleFactor/HWidth(toScale), TRUE
	         );
END;

{// Draws Rack Space Numbers on side of RackObj //}
PROCEDURE Draw_RackSpace_Numbers(leftOrRight : CHAR);
VAR
	i, direction  : INTEGER;
	offsetX       : REAL;
	pt1,pt2,start : POINT;
BEGIN
	GetBBox(h_OuterRect,pt1.X,pt1.Y,pt2.X,pt2.Y);
	direction := 1;
	IF leftOrRight='L' THEN BEGIN
		offsetX := -1.25in;
		start.X := pt1.X+offsetX;
	END;
	IF leftOrRight='R' THEN BEGIN
		offsetX := 1.25in;
		start.X := pt2.X+offsetX;
	END;
	IF PNUMFROM = 'Bottom' THEN BEGIN
		direction := 1;
		start.Y := 0+(k_RackU/2);
	END ELSE BEGIN
		direction := -1;
		start.Y := (PNUMSPACES*k_RackU)-(k_RackU/2);
	END;
	TextOrigin(start.X,start.Y);
	MoveTo(start.X,start.Y);
	Relative; {````````````````````````````````````````}
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
	TextSize(8*(12/GetLScale(Find_Layer(h_Obj))));
	TextJust(2);
	TextVerticalAlign(3);
	TextFace([]);
	Fill_WtoB(0);
	PenSize(2);
	FOR i:=1 TO PNUMSPACES DO BEGIN
		Pen_WtoB(0.5);
		CreateText(Num2Str(0,i));
		Pen_WtoB(0.25);
		Line(-offsetX,0);
		HMoveBackward(LNewObj,TRUE);
		Move(offsetX,k_RackU*direction);
	END;
	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}
	Absolute; {________________________________________}
END;

{====================================}
{------------- < MAIN > -------------}
{====================================}

{// Retrieve plug-in object information //}
BEGIN IF GetCustomObjectInfo(s_ObjName,h_Obj,h_ObjRecord,h_ObjWall) THEN BEGIN
	Set_Version_Info('0 . 6');
	Use_PIO_Text_Attributes(h_Obj);

	{===== Parameter Limits =====}
	IF (PNUMSPACES<1) THEN BEGIN
		SetRField(h_Obj,s_ObjName,'NumSpaces', '1');
		AlrtDialog(
		           'Out of Bounds, Number of spaces must be greater than zero.'
		           );
		ResetObject(h_Obj);
	END;
	r_Height := k_RackU*PNUMSPACES;
	r_Width := k_RackWidth;

	{// Rectangle Creation //}
	MoveTo(0,0);
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
	PenSize(2);
	Pen_WtoB(1);
	IF PFRONTORBACK='Rear' THEN Fill_WtoB(0.2)
	ELSE Fill_WtoB(0.1);
	Rect(-r_Width/2,0,r_Width/2,r_Height);
	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}
	GetBBox(LNewObj,p_Tmp1.X,p_Tmp1.Y,p_Tmp2.X,p_Tmp2.Y);
	Rect(p_Tmp1.X-PFRAME,p_Tmp1.Y+PFRAME,p_Tmp2.X+PFRAME,p_Tmp2.Y-PFRAME);
	h_OuterRect := LNewObj;
	HMoveBackward(h_OuterRect,TRUE);

	{// Rack Spaces Line Guides //}
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
	MoveTo(r_Width/2,0);
	PenSize(1);
	Pen_WtoB(0.35);
	Relative; {````````````````````````````````````````}
	FOR i_Counter := 2 TO PNUMSPACES DO BEGIN
		Move(-r_Width,k_RackU);
		Line(r_Width,0);
	END;
	Absolute; {________________________________________}
	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}

	{// Rack Ear Vertical Lines //}
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
	PenSize(1);
	Pen_WtoB(1);
	Fill_WtoB(0.35);
	Rect(p_Tmp1.X,p_Tmp1.Y,p_Tmp1.X+k_EarWidth,p_Tmp1.Y-r_Height);
	Rect(p_Tmp2.X,p_Tmp2.Y,p_Tmp2.X-k_EarWidth,p_Tmp2.Y+r_Height);
	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}

	{// Label Text Creation and Formating //}
	IF PRACKID <> '' THEN BEGIN
		PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
		MoveTo(0,0);
		TextOrigin(0,r_Height+PFRAME+0.5in);
		Fill_WtoB(0);
		TextJust(2);
		TextVerticalAlign(5);
		IF (PFRONTORBACK<>' ') THEN BEGIN
			CreateText(Concat(PRACKID,Chr(13),'(',PFRONTORBACK,')'));
			SetTextSize(
			            LNewObj,Len(PRACKID),Len(GetText(LNewObj)),
			            GetTextSize(LNewObj,0)-1
			            );
		END ELSE CreateText(PRACKID);
		HMoveBackward(LNewObj,TRUE);
		SetTextWidth(LNewObj,k_RackWidth);
		SetTextLeading(LNewObj,GetTextSize(LNewObj,0)*0.9);
	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}
	END;

	{// Rack Space Number Creation //}
	IF (PSHOWNUM='Left') OR (PSHOWNUM='Both') THEN Draw_RackSpace_Numbers('L');
	IF (PSHOWNUM='Right') OR (PSHOWNUM='Both') THEN Draw_RackSpace_Numbers('R');

	{ Refresh_Gear_In_Rack(h_Obj); }
	Refresh_Children(h_Obj, 'RackEquip (Salutz)');
END; END; Run(Rack_Obj);

{//////////////////////////////////////////////////////////////////////////////
//  Developed by John Salutz, (c) 2022. Please share freely.
//
//  A simplified hanging scenery tool
//////////////////////////////////////////////////////////////////////////////}

{//////////////////////////////////////////////////////////////////////////////
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 2.1 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
//  <https://www.gnu.org/licenses/>
//////////////////////////////////////////////////////////////////////////////}

PROCEDURE SimpleSoftgoods;

CONST
	RGBmax = 65535; {Max value for setting RGB colors in VS fuctions}

VAR
	{Standard variables}
	s_ObjName                                               : STRING;
	h_Obj,h_ObjRecord,h_ObjWall                             : HANDLE;
	b_Result                                                : BOOLEAN;
	i_Counter                                               : INTEGER;
	{Script specific variables}
	r_DrawLength                                            : REAL;
	h_Softgood,h_Softgood2,h_Label,h_Label2,h_Rect1,h_Rect2 : HANDLE;
	p_TopL,p_BotR                                           : POINT;

{===== LOCAL FUNCTION DECLARATIONS =====}

{// See SalutzToolsFunctions.vss for additional fuctions //}
{$INCLUDE SalutzToolsFunctions.vss}

PROCEDURE Set_DashStyle_Cust(h : HANDLE; style : STRING);
VAR li_Dash : LONGINT;
BEGIN
	{// Dashed Line Setup //}
	IF style = 'Solid' THEN
		li_Dash := 2
	ELSE IF style='Dashed' THEN BEGIN
		li_Dash := GetDashStyleIndexN(TRUE, 1, 0.12in, 0.03in);
		b_Result := SetDashLineTypeName(li_Dash, 'ISO-02 Dashed');
	END
	ELSE IF style='Dashed Spaced' THEN BEGIN
		li_Dash := GetDashStyleIndexN(TRUE, 1, 0.12in, 0.18in);
		b_Result := SetDashLineTypeName(li_Dash, 'ISO-03 Dashed Spaced');
	END
	ELSE IF style='Dotted' THEN BEGIN
		li_Dash := GetDashStyleIndexN(TRUE, 1, 0.005in, 0.03in);
		b_Result := SetDashLineTypeName(li_Dash, 'ISO-07 Dotted');
	END
	ELSE IF style='None' THEN BEGIN
		li_Dash := 2;
		SetLW(h,0);
	END;
	SetLSN(h,li_Dash);
END;

{====================================}
{------------- < MAIN > -------------}
{====================================}

{// Retrieve plug-in object information //}
BEGIN IF GetCustomObjectInfo(s_ObjName,h_Obj,h_ObjRecord,h_ObjWall) THEN BEGIN
	Set_Version_Info('0 . 6 . 7');
	Use_PIO_Text_Attributes(h_Obj);

	{===== Variable Assignment =====}
	IF (POPENING > 0) THEN r_DrawLength := (PLENGTH-POPENING)/2
	ELSE r_DrawLength := PLENGTH;

	p_TopL.X := -PLENGTH/2;
	p_TopL.Y := PDEPTH-(PDEPTH*PHANGPOINT);
	p_BotR.X := PLENGTH/2;
	p_BotR.Y := -(PDEPTH*PHANGPOINT);

	{===== Parameter Limits =====}
	IF (PHANGPOINT<0) THEN BEGIN
		SetRField(h_Obj,s_ObjName,'HangPoint', '0');
		ResetObject(h_Obj);
	END;
	IF (PHANGPOINT>1) THEN BEGIN
		SetRField(h_Obj,s_ObjName,'HangPoint', '1');
		ResetObject(h_Obj);
	END;
	IF (PDEPTH<0) THEN BEGIN
		SetRField(h_Obj,s_ObjName,'Depth', '0');
		ResetObject(h_Obj);
	END;

	{// Draw Extrude //}
	BeginXtrd(0,PLENGTH);
	BeginPoly;
	Add2DVertex(0,p_BotR.Y,0,0);
	IF PSOFTORHARD = 'Soft' THEN Add2DVertex(-PHEIGHT,0,0,0)
	ELSE IF PSOFTORHARD = 'Hard' THEN BEGIN
		Add2DVertex(-PHEIGHT,p_BotR.Y,0,0);
		Add2DVertex(-PHEIGHT,p_TopL.Y,0,0);
	END;
	Add2DVertex(0,p_TopL.Y,0,0);
	Add2DVertex(0,p_BotR.Y,0,0);
	EndPoly;
	EndXtrd;
	h_Softgood := LNewObj;
	SetTextureRefN(h_Softgood,0,3,0);

	{// Rotate, Move, and Duplicate //}
	SetRot3D(h_Softgood,0,90,0,0,0,0);
	Move3DObj(h_Softgood,-PLENGTH/2,0,0);
	IF (POPENING > 0) THEN BEGIN
		BeginXtrd(0,PHEIGHT-PPORTAL);
		Rect(-POPENING/2,p_TopL.Y+1,POPENING/2,p_BotR.Y-1);
		EndXtrd;
		i_Counter := SubtractSolid(h_Softgood,LNewObj,h_Softgood2);
	END;

	{// Draw 2D Components //}
	IF (PDEPTH > 0)
		THEN Rect(p_TopL.X,p_TopL.Y,p_BotR.X,p_BotR.Y)
	ELSE BEGIN
		MoveTo(-PLENGTH/2,(PDEPTH*PHANGPOINT));
		LineTo(PLENGTH/2,-PDEPTH+(PDEPTH*PHANGPOINT));
	END;
	h_Rect1 := LNewObj;

	IF (POPENING > 0) THEN BEGIN
		IF (PDEPTH > 0) THEN BEGIN
			Rect(-POPENING/2,p_TopL.Y,POPENING/2,p_BotR.Y);
			h_Rect2 := LNewObj;
			ClipSurface(h_Rect1,h_Rect2);
		END ELSE BEGIN
			{// Draw Lines for Legs //}
			DelObject(h_Rect1);
			MoveTo(-PLENGTH/2,(PDEPTH*PHANGPOINT));
			LineTo(-POPENING/2,-PDEPTH+(PDEPTH*PHANGPOINT));
			MoveTo(POPENING/2,(PDEPTH*PHANGPOINT));
			LineTo(PLENGTH/2,-PDEPTH+(PDEPTH*PHANGPOINT));
			{// Draw Line for Opening //}
			MoveTo(-POPENING/2,(PDEPTH*PHANGPOINT));
			LineTo(POPENING/2,-PDEPTH+(PDEPTH*PHANGPOINT));
			h_Rect2 := LNewObj;
		END;
		Set_DashStyle_Cust(h_Rect2,POPENPORTALPEN);
		SetFPat(h_Rect2,0);
	END;

	{// Draw Text //}
	IF PLABEL <> '' THEN BEGIN
		PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
		TextJust(2);
		TextVerticalAlign(3);
		IF (PTEXTCOLOR='Black') THEN Pen_WtoB(1);
		IF (PTEXTBG='White') THEN Fill_WtoB(0);
		IF (PTEXTBG='None') THEN FillPat(0);
		IF (PLABELPOSI = 'Center')
			OR (PLABELPOSI = 'Both')
			OR (POPENING = 0) THEN BEGIN
				TextOrigin(0,0);
				CreateText(PLABEL);
				h_Label := LNewObj;
		END;
		IF (POPENING > 0)
			AND ((PLABELPOSI = 'Legs') OR (PLABELPOSI = 'Both')) THEN BEGIN
				TextOrigin((-POPENING/2)-(r_DrawLength/2),0);
				CreateText(PLABEL);
				TextOrigin((POPENING/2)+(r_DrawLength/2),0);
				CreateText(PLABEL);
		END;
		PopAttrs; {))))))))))))))))))))))))))))))))))))))))}
	END;

END; END; Run(SimpleSoftgoods);

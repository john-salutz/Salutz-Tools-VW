{//////////////////////////////////////////////////////////////////////////////
//  Developed by John Salutz, (c) 2020. Please share freely.
//
//  Rack_Equip creates a dynamic piece of rack mounted equipment.
//////////////////////////////////////////////////////////////////////////////}

{//////////////////////////////////////////////////////////////////////////////
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 2.1 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//  See the GNU Lesser General Public License for more details.
//  <https://www.gnu.org/licenses/>
//////////////////////////////////////////////////////////////////////////////}

PROCEDURE Rack_Equip;

CONST {Rack Related Constants}
	k_RackU     = 1.75in;     {1 rack unit height (1.75")}
	k_RackWidth = 19in;       {19" rack width}
	k_EarWidth  = 5/8in;    {Rack ear width (5/8")}
	RGBmax      = 65535;    {Max value for setting RGB colors in VS fuctions}

VAR
	{Standard variables}
	s_ObjName                                               : STRING;
	h_Obj,h_ObjRecord,h_ObjWall                             : HANDLE;
	b_Result                                                : BOOLEAN;
	i_Counter                                               : INTEGER;
	{Script specific variables}
	h_Rack,h_InnerRect,h_Purpose,h_MakeModel                : HANDLE;
	r_Height,r_Width                                        : REAL;
	p_Temp,p_EquipLoc,p_RackLoc                             : POINT;
	s_RackID                                                : STRING;
	li_List                                                 : LONGINT;

{===== LOCAL FUNCTION DECLARATIONS =====}

{// See SalutzToolsFunctions.vss for additional fuctions //}
{$INCLUDE SalutzToolsFunctions.vss}

PROCEDURE Scale_Fit_Height (toScale,fitTo : HANDLE; scaleFactor : REAL);
VAR p1 : POINT;
BEGIN
	HCenter(toScale,p1.X,p1.Y);
	HScale2D(
	        toScale, p1.X, p1.Y, (HHeight(fitTo)*scaleFactor)/HHeight(toScale),
	        (HHeight(fitTo)*scaleFactor)/HHeight(toScale), TRUE
	        );
END;

PROCEDURE Scale_Fit_Width (toScale,fitTo : HANDLE; scaleFactor : REAL);
VAR p1 : POINT;
BEGIN
	HCenter(toScale,p1.X,p1.Y);
	HScale2D(
	        toScale, p1.X, p1.Y, HWidth(fitTo)*scaleFactor/HWidth(toScale),
	        HWidth(fitTo)*scaleFactor/HWidth(toScale), TRUE
	        );
END;

FUNCTION Get_RackHandle_At_Pt(p1 : POINT) : HANDLE;
VAR
	li_List                   : LONGINT;
	i_ListCount,i_NumPickObj  : INTEGER;
BEGIN
	li_List := FindObjAtPt_Create(NIL,1, 1, p1.x, p1.y, 1);
	i_NumPickObj := FindObjAtPt_GetCount(li_List);
	FOR i_ListCount:=0 TO i_NumPickObj DO BEGIN
		IF (GetObjectVariableString(
		                            FindObjAtPt_GetObj(li_List,i_ListCount),1166
		                            ) = 'RackObject (Salutz)'
		    )
			THEN Get_RackHandle_At_Pt :=FindObjAtPt_GetObj(li_List,i_ListCount);
	END;
END;

{// Returns a string of the RackID of Rack Obj found at point //}
FUNCTION Get_RackName(h : HANDLE) : STRING;
VAR s1,s2 : STRING;
BEGIN IF (h = NIL) THEN Get_RackName := ''
	ELSE BEGIN
		s1 := STF_GetRField(h,'RackID');
		s2 := STF_GetRField(h,'FrontOrBack');
		IF (s2<>' ') THEN
			Get_RackName := Concat(s1,' (',s2,')')
		ELSE Get_RackName := s1;
	END;
END;

FUNCTION Get_RackNumFrom(h : HANDLE) : STRING;
BEGIN IF (h = NIL) THEN Get_RackNumFrom := ''
	ELSE Get_RackNumFrom := STF_GetRField(h, 'NumFrom');
END;

FUNCTION Get_RackNumSpaces(h : HANDLE) : INTEGER;
BEGIN IF (h = NIL) THEN Get_RackNumSpaces := 0
	ELSE Get_RackNumSpaces := Str2Num(STF_GetRField(h, 'NumSpaces'));
END;

FUNCTION Get_PositionInRack(rack,equip : HANDLE) : STRING;
VAR
	offset : REAL;
	pRack,pEquip  : POINT;
BEGIN
	GetSymLoc(equip,pEquip.X,pEquip.Y);
	GetSymLoc(rack,pRack.X,pRack.Y);
	{ offset := ((p_EquipLoc.Y-p_RackLoc.Y)/k_RackU); }
	offset := ((pEquip.Y-pRack.Y)/k_RackU);
	IF Get_RackNumFrom(rack) = 'Bottom'
		THEN Get_PositionInRack := Num2Str(0,offset)
	ELSE IF Get_RackNumFrom(rack) = 'Top'
		THEN Get_PositionInRack := Num2Str(0, Get_RackNumSpaces(rack)-offset+1);
END;

{====================================}
{------------- < MAIN > -------------}
{====================================}

{// Retrieve plug-in object information //}
BEGIN IF GetCustomObjectInfo(s_ObjName,h_Obj,h_ObjRecord,h_ObjWall) THEN BEGIN
	{===== Parameter Limits & Set Variables =====}
	Set_Version_Info('0 . 6 . 7');
	Use_PIO_Text_Attributes(h_Obj);
	IF (PHALFWIDTH='TRUE') THEN BEGIN
		SetRField(h_Obj,s_ObjName,'HalfWidth', 'Half');
		ResetObject(h_Obj);
	END;

	IF (PHALFWIDTH='FALSE') THEN BEGIN
		SetRField(h_Obj,s_ObjName,'HalfWidth', 'Full');
		ResetObject(h_Obj);
	END;

	IF (PNUMSPACES<1) THEN BEGIN
		SetRField(h_Obj,s_ObjName,'NumSpaces', '1');
		AlrtDialog(
		           'Out of Bounds, Number of spaces must be greater than zero.'
		           );
		ResetObject(h_Obj);
	END;

	r_Height := k_RackU*PNUMSPACES;
	{== Set Width ==}
	IF (PHALFWIDTH='Half') THEN r_Width := k_RackWidth/2
	ELSE IF (PHALFWIDTH='Quarter')
		THEN r_Width := (k_RackWidth-(2*k_EarWidth))/4
	ELSE IF (PHALFWIDTH='Fifth') THEN r_Width := (k_RackWidth-(2*k_EarWidth))/5
	ELSE r_Width := k_RackWidth;

	{===== Get Rack Info =====}
	GetSymLoc(h_Obj,p_EquipLoc.X,p_EquipLoc.Y);
	h_Rack := Get_RackHandle_At_Pt(p_EquipLoc);

	IF h_Rack <> NIL THEN BEGIN
		GetSymLoc(h_Rack,p_RackLoc.X,p_RackLoc.Y);
		s_RackID := Get_RackName(h_Rack);
		SetRField(h_Obj,s_ObjName,'RackID',s_RackID);
	END ELSE BEGIN
		s_RackID := '';
		SetRField(h_Obj,s_ObjName,'RackID',s_RackID);
	END;

	{=== Get vertical and horizontal position in rack ===}
	IF (s_RackID<>'') THEN BEGIN
		IF (PHALFWIDTH='Half') THEN BEGIN
			IF (p_EquipLoc.X<p_RackLoc.X)
				THEN SetRField(
				               h_Obj, s_ObjName, 'RackPosition',
				               Concat(Get_PositionInRack(h_Rack,h_Obj),'-L')
				               )
			ELSE IF (p_EquipLoc.X>p_RackLoc.X)
				THEN SetRField(
				               h_Obj, s_ObjName, 'RackPosition',
				               Concat(Get_PositionInRack(h_Rack,h_Obj),'-R')
				               )
		END ELSE IF (PHALFWIDTH='Quarter') THEN BEGIN
			IF (p_EquipLoc.X<(p_RackLoc.X-r_Width))
				{Position 1}
				THEN SetRField(
				               h_Obj, s_ObjName, 'RackPosition',
				               Concat(Get_PositionInRack(h_Rack,h_Obj),'.1')
				               )
			ELSE IF ((p_EquipLoc.X>(p_RackLoc.X-r_Width))
			         AND (p_EquipLoc.X<p_RackLoc.X))
				{Position 2}
				THEN SetRField(
				               h_Obj, s_ObjName, 'RackPosition',
				               Concat(Get_PositionInRack(h_Rack,h_Obj),'.2')
				               )
			ELSE IF ((p_EquipLoc.X<(p_RackLoc.X+r_Width))
			         AND (p_EquipLoc.X>p_RackLoc.X))
				{Position 3}
				THEN SetRField(
				               h_Obj, s_ObjName, 'RackPosition',
				               Concat(Get_PositionInRack(h_Rack,h_Obj),'.3')
				               )
			ELSE IF (p_EquipLoc.X>(p_RackLoc.X+r_Width))
				{Position 4}
				THEN SetRField(
				               h_Obj, s_ObjName, 'RackPosition',
				               Concat(Get_PositionInRack(h_Rack,h_Obj),'.4')
				               )


		END ELSE IF (PHALFWIDTH='Fifth') THEN BEGIN
			IF (p_EquipLoc.X<(p_RackLoc.X-(r_Width*1.5)))
				{Position 1}
				THEN SetRField(
				               h_Obj, s_ObjName, 'RackPosition',
				               Concat(Get_PositionInRack(h_Rack,h_Obj),'.1')
				               )
			ELSE IF ((p_EquipLoc.X>(p_RackLoc.X-(r_Width*1.5)))
			         AND (p_EquipLoc.X<(p_RackLoc.X-(r_Width/2))))
				{Position 2}
				THEN SetRField(
				               h_Obj, s_ObjName, 'RackPosition',
				               Concat(Get_PositionInRack(h_Rack,h_Obj),'.2')
				               )
			ELSE IF ((p_EquipLoc.X>(p_RackLoc.X-(r_Width/2)))
			         AND (p_EquipLoc.X<(p_RackLoc.X+(r_Width/2))))
				{Position 3}
				THEN SetRField(
				               h_Obj, s_ObjName, 'RackPosition',
				               Concat(Get_PositionInRack(h_Rack,h_Obj),'.3')
				               )
			ELSE IF ((p_EquipLoc.X>(p_RackLoc.X+(r_Width/2)))
					 AND (p_EquipLoc.X<(p_RackLoc.X+(r_Width*1.5))))
				{Position 4}
				THEN SetRField(
				               h_Obj, s_ObjName, 'RackPosition',
				               Concat(Get_PositionInRack(h_Rack,h_Obj),'.4')
				               )
			ELSE IF (p_EquipLoc.X>(p_RackLoc.X+(r_Width*1.5)))
				{Position 5}
				THEN SetRField(
				               h_Obj, s_ObjName, 'RackPosition',
				               Concat(Get_PositionInRack(h_Rack,h_Obj),'.5')
				               )
		END ELSE SetRField(
		                   h_Obj,s_ObjName,'RackPosition',
		                   Get_PositionInRack(h_Rack,h_Obj)
		                   );
	END ELSE SetRField(h_Obj,s_ObjName,'RackPosition', Num2Str(0,0));

	{=== Draw Object ===}
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
	Pen_WtoB(1);
	Rect(-r_Width/2,0,r_Width/2,-r_Height);
	PenSize(2);
	IF (PCOLOR = 'Rack Ears only') THEN Fill_WtoB(0);
	IF (PHALFWIDTH='Full') OR (PHALFWIDTH='Half') THEN BEGIN
		PenSize(2);
		Rect(-r_Width/2+k_EarWidth,0,r_Width/2-k_EarWidth,-r_Height);
	END ELSE BEGIN
		PenSize(0);
		Rect((-r_Width/2)+.125,-.125,(r_Width/2)-.125,-r_Height+.125);
	END;
	h_InnerRect := LNewObj;
	MoveTo(0,-r_Height/2);
	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}

	{=== Create text labels ===}
	PushAttrs; {((((((((((((((((((((((((((((((((((((((((}
	TextJust(2);
	TextVerticalAlign(3);
	FillPat(0);

	{Make and Model text}
	IF ((PMAKE<>'') OR (PMODEL<>'')) THEN BEGIN
		IF ((PMAKE<>'') AND (PMODEL<>''))
			THEN CreateText(Concat(PMAKE, ' ', PMODEL))
		ELSE CreateText(Concat(PMAKE,PMODEL));
		h_MakeModel := LNewObj;
		SetTextJust(h_MakeModel,2);
		IF (HHeight(h_MakeModel)>(r_Height*0.5))
			THEN Scale_Fit_Height(h_MakeModel,h_InnerRect,0.5);
		IF (HHeight(h_MakeModel)>(k_RackU*1.25))
			THEN Scale_Fit_Height(h_MakeModel,h_MakeModel,
			                      (k_RackU*1.25)/HHeight(h_MakeModel));
		IF (HWidth(h_MakeModel)>(r_Width*0.9))
			THEN Scale_Fit_Width(h_MakeModel,h_InnerRect,0.9);
	END;

	{Purpose text}
	IF (PPURPOSE<>'') THEN BEGIN
		TextFace([]);
		Get2DPt(h_InnerRect,1,p_Temp.X,p_Temp.Y);
		MoveTo(p_Temp.X,p_Temp.Y);
		Relative; {````````````````````````````````````````}
		MoveTo(0.25in,0);
		TextOrigin(0,0);
		Absolute; {________________________________________}
		CreateText(PPURPOSE);
		h_Purpose := LNewObj;
		IF (HHeight(h_Purpose)>(r_Height*0.25))
			THEN Scale_Fit_Height(h_Purpose,h_InnerRect,0.25);
		IF (HHeight(h_Purpose)>(k_RackU*0.75))
			THEN Scale_Fit_Height(h_Purpose,h_Purpose,
								  (k_RackU*0.75)/HHeight(h_Purpose));
		IF (HWidth(h_Purpose)>(r_Width*0.9))
			THEN Scale_Fit_Width(h_Purpose,h_InnerRect,0.9);
		SetTextJust(h_Purpose,1);
		SetTextVerticalAlign(h_Purpose,1);
	END;

	PopAttrs; {))))))))))))))))))))))))))))))))))))))))}

END; END; Run(Rack_Equip);
